// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateAwsFileData {
  count: Int!
}

type AggregateBillingInfo {
  count: Int!
}

type AggregateCard {
  count: Int!
}

type AggregateCompany {
  count: Int!
}

type AggregateCompanyContact {
  count: Int!
}

type AggregateGoogleMapsLocation {
  count: Int!
}

type AggregateJobApplication {
  count: Int!
}

type AggregateJobApplicationContact {
  count: Int!
}

type AggregateJobApplicationResume {
  count: Int!
}

type AggregateResume {
  count: Int!
}

type AggregateUser {
  count: Int!
}

enum ApplicationStatus {
  INTERESTED
  APPLIED
  INTERVIEWING
  OFFER
  DECIDED
}

type AwsFileData {
  id: ID!
  ETag: String!
  Key: String!
  Location: String!
  s3Url: String!
  cloudfrontUrl: String!
  Bucket: String!
  VersionId: String!
  fileName: String!
  createdAt: DateTime!
}

type AwsFileDataConnection {
  pageInfo: PageInfo!
  edges: [AwsFileDataEdge]!
  aggregate: AggregateAwsFileData!
}

input AwsFileDataCreateInput {
  id: ID
  ETag: String!
  Key: String!
  Location: String!
  s3Url: String!
  cloudfrontUrl: String!
  Bucket: String!
  VersionId: String!
  fileName: String!
}

input AwsFileDataCreateManyInput {
  create: [AwsFileDataCreateInput!]
  connect: [AwsFileDataWhereUniqueInput!]
}

input AwsFileDataCreateOneInput {
  create: AwsFileDataCreateInput
  connect: AwsFileDataWhereUniqueInput
}

type AwsFileDataEdge {
  node: AwsFileData!
  cursor: String!
}

enum AwsFileDataOrderByInput {
  id_ASC
  id_DESC
  ETag_ASC
  ETag_DESC
  Key_ASC
  Key_DESC
  Location_ASC
  Location_DESC
  s3Url_ASC
  s3Url_DESC
  cloudfrontUrl_ASC
  cloudfrontUrl_DESC
  Bucket_ASC
  Bucket_DESC
  VersionId_ASC
  VersionId_DESC
  fileName_ASC
  fileName_DESC
  createdAt_ASC
  createdAt_DESC
}

type AwsFileDataPreviousValues {
  id: ID!
  ETag: String!
  Key: String!
  Location: String!
  s3Url: String!
  cloudfrontUrl: String!
  Bucket: String!
  VersionId: String!
  fileName: String!
  createdAt: DateTime!
}

input AwsFileDataScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ETag: String
  ETag_not: String
  ETag_in: [String!]
  ETag_not_in: [String!]
  ETag_lt: String
  ETag_lte: String
  ETag_gt: String
  ETag_gte: String
  ETag_contains: String
  ETag_not_contains: String
  ETag_starts_with: String
  ETag_not_starts_with: String
  ETag_ends_with: String
  ETag_not_ends_with: String
  Key: String
  Key_not: String
  Key_in: [String!]
  Key_not_in: [String!]
  Key_lt: String
  Key_lte: String
  Key_gt: String
  Key_gte: String
  Key_contains: String
  Key_not_contains: String
  Key_starts_with: String
  Key_not_starts_with: String
  Key_ends_with: String
  Key_not_ends_with: String
  Location: String
  Location_not: String
  Location_in: [String!]
  Location_not_in: [String!]
  Location_lt: String
  Location_lte: String
  Location_gt: String
  Location_gte: String
  Location_contains: String
  Location_not_contains: String
  Location_starts_with: String
  Location_not_starts_with: String
  Location_ends_with: String
  Location_not_ends_with: String
  s3Url: String
  s3Url_not: String
  s3Url_in: [String!]
  s3Url_not_in: [String!]
  s3Url_lt: String
  s3Url_lte: String
  s3Url_gt: String
  s3Url_gte: String
  s3Url_contains: String
  s3Url_not_contains: String
  s3Url_starts_with: String
  s3Url_not_starts_with: String
  s3Url_ends_with: String
  s3Url_not_ends_with: String
  cloudfrontUrl: String
  cloudfrontUrl_not: String
  cloudfrontUrl_in: [String!]
  cloudfrontUrl_not_in: [String!]
  cloudfrontUrl_lt: String
  cloudfrontUrl_lte: String
  cloudfrontUrl_gt: String
  cloudfrontUrl_gte: String
  cloudfrontUrl_contains: String
  cloudfrontUrl_not_contains: String
  cloudfrontUrl_starts_with: String
  cloudfrontUrl_not_starts_with: String
  cloudfrontUrl_ends_with: String
  cloudfrontUrl_not_ends_with: String
  Bucket: String
  Bucket_not: String
  Bucket_in: [String!]
  Bucket_not_in: [String!]
  Bucket_lt: String
  Bucket_lte: String
  Bucket_gt: String
  Bucket_gte: String
  Bucket_contains: String
  Bucket_not_contains: String
  Bucket_starts_with: String
  Bucket_not_starts_with: String
  Bucket_ends_with: String
  Bucket_not_ends_with: String
  VersionId: String
  VersionId_not: String
  VersionId_in: [String!]
  VersionId_not_in: [String!]
  VersionId_lt: String
  VersionId_lte: String
  VersionId_gt: String
  VersionId_gte: String
  VersionId_contains: String
  VersionId_not_contains: String
  VersionId_starts_with: String
  VersionId_not_starts_with: String
  VersionId_ends_with: String
  VersionId_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_lt: String
  fileName_lte: String
  fileName_gt: String
  fileName_gte: String
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AwsFileDataScalarWhereInput!]
  OR: [AwsFileDataScalarWhereInput!]
  NOT: [AwsFileDataScalarWhereInput!]
}

type AwsFileDataSubscriptionPayload {
  mutation: MutationType!
  node: AwsFileData
  updatedFields: [String!]
  previousValues: AwsFileDataPreviousValues
}

input AwsFileDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AwsFileDataWhereInput
  AND: [AwsFileDataSubscriptionWhereInput!]
  OR: [AwsFileDataSubscriptionWhereInput!]
  NOT: [AwsFileDataSubscriptionWhereInput!]
}

input AwsFileDataUpdateDataInput {
  ETag: String
  Key: String
  Location: String
  s3Url: String
  cloudfrontUrl: String
  Bucket: String
  VersionId: String
  fileName: String
}

input AwsFileDataUpdateInput {
  ETag: String
  Key: String
  Location: String
  s3Url: String
  cloudfrontUrl: String
  Bucket: String
  VersionId: String
  fileName: String
}

input AwsFileDataUpdateManyDataInput {
  ETag: String
  Key: String
  Location: String
  s3Url: String
  cloudfrontUrl: String
  Bucket: String
  VersionId: String
  fileName: String
}

input AwsFileDataUpdateManyInput {
  create: [AwsFileDataCreateInput!]
  update: [AwsFileDataUpdateWithWhereUniqueNestedInput!]
  upsert: [AwsFileDataUpsertWithWhereUniqueNestedInput!]
  delete: [AwsFileDataWhereUniqueInput!]
  connect: [AwsFileDataWhereUniqueInput!]
  set: [AwsFileDataWhereUniqueInput!]
  disconnect: [AwsFileDataWhereUniqueInput!]
  deleteMany: [AwsFileDataScalarWhereInput!]
  updateMany: [AwsFileDataUpdateManyWithWhereNestedInput!]
}

input AwsFileDataUpdateManyMutationInput {
  ETag: String
  Key: String
  Location: String
  s3Url: String
  cloudfrontUrl: String
  Bucket: String
  VersionId: String
  fileName: String
}

input AwsFileDataUpdateManyWithWhereNestedInput {
  where: AwsFileDataScalarWhereInput!
  data: AwsFileDataUpdateManyDataInput!
}

input AwsFileDataUpdateOneInput {
  create: AwsFileDataCreateInput
  update: AwsFileDataUpdateDataInput
  upsert: AwsFileDataUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: AwsFileDataWhereUniqueInput
}

input AwsFileDataUpdateWithWhereUniqueNestedInput {
  where: AwsFileDataWhereUniqueInput!
  data: AwsFileDataUpdateDataInput!
}

input AwsFileDataUpsertNestedInput {
  update: AwsFileDataUpdateDataInput!
  create: AwsFileDataCreateInput!
}

input AwsFileDataUpsertWithWhereUniqueNestedInput {
  where: AwsFileDataWhereUniqueInput!
  update: AwsFileDataUpdateDataInput!
  create: AwsFileDataCreateInput!
}

input AwsFileDataWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  ETag: String
  ETag_not: String
  ETag_in: [String!]
  ETag_not_in: [String!]
  ETag_lt: String
  ETag_lte: String
  ETag_gt: String
  ETag_gte: String
  ETag_contains: String
  ETag_not_contains: String
  ETag_starts_with: String
  ETag_not_starts_with: String
  ETag_ends_with: String
  ETag_not_ends_with: String
  Key: String
  Key_not: String
  Key_in: [String!]
  Key_not_in: [String!]
  Key_lt: String
  Key_lte: String
  Key_gt: String
  Key_gte: String
  Key_contains: String
  Key_not_contains: String
  Key_starts_with: String
  Key_not_starts_with: String
  Key_ends_with: String
  Key_not_ends_with: String
  Location: String
  Location_not: String
  Location_in: [String!]
  Location_not_in: [String!]
  Location_lt: String
  Location_lte: String
  Location_gt: String
  Location_gte: String
  Location_contains: String
  Location_not_contains: String
  Location_starts_with: String
  Location_not_starts_with: String
  Location_ends_with: String
  Location_not_ends_with: String
  s3Url: String
  s3Url_not: String
  s3Url_in: [String!]
  s3Url_not_in: [String!]
  s3Url_lt: String
  s3Url_lte: String
  s3Url_gt: String
  s3Url_gte: String
  s3Url_contains: String
  s3Url_not_contains: String
  s3Url_starts_with: String
  s3Url_not_starts_with: String
  s3Url_ends_with: String
  s3Url_not_ends_with: String
  cloudfrontUrl: String
  cloudfrontUrl_not: String
  cloudfrontUrl_in: [String!]
  cloudfrontUrl_not_in: [String!]
  cloudfrontUrl_lt: String
  cloudfrontUrl_lte: String
  cloudfrontUrl_gt: String
  cloudfrontUrl_gte: String
  cloudfrontUrl_contains: String
  cloudfrontUrl_not_contains: String
  cloudfrontUrl_starts_with: String
  cloudfrontUrl_not_starts_with: String
  cloudfrontUrl_ends_with: String
  cloudfrontUrl_not_ends_with: String
  Bucket: String
  Bucket_not: String
  Bucket_in: [String!]
  Bucket_not_in: [String!]
  Bucket_lt: String
  Bucket_lte: String
  Bucket_gt: String
  Bucket_gte: String
  Bucket_contains: String
  Bucket_not_contains: String
  Bucket_starts_with: String
  Bucket_not_starts_with: String
  Bucket_ends_with: String
  Bucket_not_ends_with: String
  VersionId: String
  VersionId_not: String
  VersionId_in: [String!]
  VersionId_not_in: [String!]
  VersionId_lt: String
  VersionId_lte: String
  VersionId_gt: String
  VersionId_gte: String
  VersionId_contains: String
  VersionId_not_contains: String
  VersionId_starts_with: String
  VersionId_not_starts_with: String
  VersionId_ends_with: String
  VersionId_not_ends_with: String
  fileName: String
  fileName_not: String
  fileName_in: [String!]
  fileName_not_in: [String!]
  fileName_lt: String
  fileName_lte: String
  fileName_gt: String
  fileName_gte: String
  fileName_contains: String
  fileName_not_contains: String
  fileName_starts_with: String
  fileName_not_starts_with: String
  fileName_ends_with: String
  fileName_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [AwsFileDataWhereInput!]
  OR: [AwsFileDataWhereInput!]
  NOT: [AwsFileDataWhereInput!]
}

input AwsFileDataWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

enum BillingFrequency {
  MONTHLY
  YEARLY
}

type BillingInfo {
  id: ID!
  user: User!
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean!
  isPremiumActive: Boolean!
  card: Card
}

type BillingInfoConnection {
  pageInfo: PageInfo!
  edges: [BillingInfoEdge]!
  aggregate: AggregateBillingInfo!
}

input BillingInfoCreateInput {
  id: ID
  user: UserCreateOneWithoutBillingInput!
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean
  isPremiumActive: Boolean
  card: CardCreateOneWithoutBillingInfoInput
}

input BillingInfoCreateOneWithoutCardInput {
  create: BillingInfoCreateWithoutCardInput
  connect: BillingInfoWhereUniqueInput
}

input BillingInfoCreateOneWithoutUserInput {
  create: BillingInfoCreateWithoutUserInput
  connect: BillingInfoWhereUniqueInput
}

input BillingInfoCreateWithoutCardInput {
  id: ID
  user: UserCreateOneWithoutBillingInput!
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean
  isPremiumActive: Boolean
}

input BillingInfoCreateWithoutUserInput {
  id: ID
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean
  isPremiumActive: Boolean
  card: CardCreateOneWithoutBillingInfoInput
}

type BillingInfoEdge {
  node: BillingInfo!
  cursor: String!
}

enum BillingInfoOrderByInput {
  id_ASC
  id_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  stripeSubscriptionId_ASC
  stripeSubscriptionId_DESC
  billingFrequency_ASC
  billingFrequency_DESC
  startOfBillingPeriod_ASC
  startOfBillingPeriod_DESC
  endOfBillingPeriod_ASC
  endOfBillingPeriod_DESC
  willCancelAtEndOfPeriod_ASC
  willCancelAtEndOfPeriod_DESC
  isPremiumActive_ASC
  isPremiumActive_DESC
}

type BillingInfoPreviousValues {
  id: ID!
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean!
  isPremiumActive: Boolean!
}

type BillingInfoSubscriptionPayload {
  mutation: MutationType!
  node: BillingInfo
  updatedFields: [String!]
  previousValues: BillingInfoPreviousValues
}

input BillingInfoSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BillingInfoWhereInput
  AND: [BillingInfoSubscriptionWhereInput!]
  OR: [BillingInfoSubscriptionWhereInput!]
  NOT: [BillingInfoSubscriptionWhereInput!]
}

input BillingInfoUpdateInput {
  user: UserUpdateOneRequiredWithoutBillingInput
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean
  isPremiumActive: Boolean
  card: CardUpdateOneWithoutBillingInfoInput
}

input BillingInfoUpdateManyMutationInput {
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean
  isPremiumActive: Boolean
}

input BillingInfoUpdateOneRequiredWithoutCardInput {
  create: BillingInfoCreateWithoutCardInput
  update: BillingInfoUpdateWithoutCardDataInput
  upsert: BillingInfoUpsertWithoutCardInput
  connect: BillingInfoWhereUniqueInput
}

input BillingInfoUpdateOneWithoutUserInput {
  create: BillingInfoCreateWithoutUserInput
  update: BillingInfoUpdateWithoutUserDataInput
  upsert: BillingInfoUpsertWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  connect: BillingInfoWhereUniqueInput
}

input BillingInfoUpdateWithoutCardDataInput {
  user: UserUpdateOneRequiredWithoutBillingInput
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean
  isPremiumActive: Boolean
}

input BillingInfoUpdateWithoutUserDataInput {
  stripeCustomerId: String
  stripeSubscriptionId: String
  billingFrequency: BillingFrequency
  startOfBillingPeriod: Int
  endOfBillingPeriod: Int
  willCancelAtEndOfPeriod: Boolean
  isPremiumActive: Boolean
  card: CardUpdateOneWithoutBillingInfoInput
}

input BillingInfoUpsertWithoutCardInput {
  update: BillingInfoUpdateWithoutCardDataInput!
  create: BillingInfoCreateWithoutCardInput!
}

input BillingInfoUpsertWithoutUserInput {
  update: BillingInfoUpdateWithoutUserDataInput!
  create: BillingInfoCreateWithoutUserInput!
}

input BillingInfoWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  stripeCustomerId: String
  stripeCustomerId_not: String
  stripeCustomerId_in: [String!]
  stripeCustomerId_not_in: [String!]
  stripeCustomerId_lt: String
  stripeCustomerId_lte: String
  stripeCustomerId_gt: String
  stripeCustomerId_gte: String
  stripeCustomerId_contains: String
  stripeCustomerId_not_contains: String
  stripeCustomerId_starts_with: String
  stripeCustomerId_not_starts_with: String
  stripeCustomerId_ends_with: String
  stripeCustomerId_not_ends_with: String
  stripeSubscriptionId: String
  stripeSubscriptionId_not: String
  stripeSubscriptionId_in: [String!]
  stripeSubscriptionId_not_in: [String!]
  stripeSubscriptionId_lt: String
  stripeSubscriptionId_lte: String
  stripeSubscriptionId_gt: String
  stripeSubscriptionId_gte: String
  stripeSubscriptionId_contains: String
  stripeSubscriptionId_not_contains: String
  stripeSubscriptionId_starts_with: String
  stripeSubscriptionId_not_starts_with: String
  stripeSubscriptionId_ends_with: String
  stripeSubscriptionId_not_ends_with: String
  billingFrequency: BillingFrequency
  billingFrequency_not: BillingFrequency
  billingFrequency_in: [BillingFrequency!]
  billingFrequency_not_in: [BillingFrequency!]
  startOfBillingPeriod: Int
  startOfBillingPeriod_not: Int
  startOfBillingPeriod_in: [Int!]
  startOfBillingPeriod_not_in: [Int!]
  startOfBillingPeriod_lt: Int
  startOfBillingPeriod_lte: Int
  startOfBillingPeriod_gt: Int
  startOfBillingPeriod_gte: Int
  endOfBillingPeriod: Int
  endOfBillingPeriod_not: Int
  endOfBillingPeriod_in: [Int!]
  endOfBillingPeriod_not_in: [Int!]
  endOfBillingPeriod_lt: Int
  endOfBillingPeriod_lte: Int
  endOfBillingPeriod_gt: Int
  endOfBillingPeriod_gte: Int
  willCancelAtEndOfPeriod: Boolean
  willCancelAtEndOfPeriod_not: Boolean
  isPremiumActive: Boolean
  isPremiumActive_not: Boolean
  card: CardWhereInput
  AND: [BillingInfoWhereInput!]
  OR: [BillingInfoWhereInput!]
  NOT: [BillingInfoWhereInput!]
}

input BillingInfoWhereUniqueInput {
  id: ID
  stripeCustomerId: String
}

type Card {
  id: ID!
  billingInfo: BillingInfo!
  last4Digits: String!
  expMonth: Int!
  expYear: Int!
  brand: String!
  stripePaymentMethodId: String!
}

type CardConnection {
  pageInfo: PageInfo!
  edges: [CardEdge]!
  aggregate: AggregateCard!
}

input CardCreateInput {
  id: ID
  billingInfo: BillingInfoCreateOneWithoutCardInput!
  last4Digits: String!
  expMonth: Int!
  expYear: Int!
  brand: String!
  stripePaymentMethodId: String!
}

input CardCreateOneWithoutBillingInfoInput {
  create: CardCreateWithoutBillingInfoInput
  connect: CardWhereUniqueInput
}

input CardCreateWithoutBillingInfoInput {
  id: ID
  last4Digits: String!
  expMonth: Int!
  expYear: Int!
  brand: String!
  stripePaymentMethodId: String!
}

type CardEdge {
  node: Card!
  cursor: String!
}

enum CardOrderByInput {
  id_ASC
  id_DESC
  last4Digits_ASC
  last4Digits_DESC
  expMonth_ASC
  expMonth_DESC
  expYear_ASC
  expYear_DESC
  brand_ASC
  brand_DESC
  stripePaymentMethodId_ASC
  stripePaymentMethodId_DESC
}

type CardPreviousValues {
  id: ID!
  last4Digits: String!
  expMonth: Int!
  expYear: Int!
  brand: String!
  stripePaymentMethodId: String!
}

type CardSubscriptionPayload {
  mutation: MutationType!
  node: Card
  updatedFields: [String!]
  previousValues: CardPreviousValues
}

input CardSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CardWhereInput
  AND: [CardSubscriptionWhereInput!]
  OR: [CardSubscriptionWhereInput!]
  NOT: [CardSubscriptionWhereInput!]
}

input CardUpdateInput {
  billingInfo: BillingInfoUpdateOneRequiredWithoutCardInput
  last4Digits: String
  expMonth: Int
  expYear: Int
  brand: String
  stripePaymentMethodId: String
}

input CardUpdateManyMutationInput {
  last4Digits: String
  expMonth: Int
  expYear: Int
  brand: String
  stripePaymentMethodId: String
}

input CardUpdateOneWithoutBillingInfoInput {
  create: CardCreateWithoutBillingInfoInput
  update: CardUpdateWithoutBillingInfoDataInput
  upsert: CardUpsertWithoutBillingInfoInput
  delete: Boolean
  disconnect: Boolean
  connect: CardWhereUniqueInput
}

input CardUpdateWithoutBillingInfoDataInput {
  last4Digits: String
  expMonth: Int
  expYear: Int
  brand: String
  stripePaymentMethodId: String
}

input CardUpsertWithoutBillingInfoInput {
  update: CardUpdateWithoutBillingInfoDataInput!
  create: CardCreateWithoutBillingInfoInput!
}

input CardWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  billingInfo: BillingInfoWhereInput
  last4Digits: String
  last4Digits_not: String
  last4Digits_in: [String!]
  last4Digits_not_in: [String!]
  last4Digits_lt: String
  last4Digits_lte: String
  last4Digits_gt: String
  last4Digits_gte: String
  last4Digits_contains: String
  last4Digits_not_contains: String
  last4Digits_starts_with: String
  last4Digits_not_starts_with: String
  last4Digits_ends_with: String
  last4Digits_not_ends_with: String
  expMonth: Int
  expMonth_not: Int
  expMonth_in: [Int!]
  expMonth_not_in: [Int!]
  expMonth_lt: Int
  expMonth_lte: Int
  expMonth_gt: Int
  expMonth_gte: Int
  expYear: Int
  expYear_not: Int
  expYear_in: [Int!]
  expYear_not_in: [Int!]
  expYear_lt: Int
  expYear_lte: Int
  expYear_gt: Int
  expYear_gte: Int
  brand: String
  brand_not: String
  brand_in: [String!]
  brand_not_in: [String!]
  brand_lt: String
  brand_lte: String
  brand_gt: String
  brand_gte: String
  brand_contains: String
  brand_not_contains: String
  brand_starts_with: String
  brand_not_starts_with: String
  brand_ends_with: String
  brand_not_ends_with: String
  stripePaymentMethodId: String
  stripePaymentMethodId_not: String
  stripePaymentMethodId_in: [String!]
  stripePaymentMethodId_not_in: [String!]
  stripePaymentMethodId_lt: String
  stripePaymentMethodId_lte: String
  stripePaymentMethodId_gt: String
  stripePaymentMethodId_gte: String
  stripePaymentMethodId_contains: String
  stripePaymentMethodId_not_contains: String
  stripePaymentMethodId_starts_with: String
  stripePaymentMethodId_not_starts_with: String
  stripePaymentMethodId_ends_with: String
  stripePaymentMethodId_not_ends_with: String
  AND: [CardWhereInput!]
  OR: [CardWhereInput!]
  NOT: [CardWhereInput!]
}

input CardWhereUniqueInput {
  id: ID
}

type Company {
  id: ID!
  user: User!
  name: String!
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  image: AwsFileData
  contacts(where: CompanyContactWhereInput, orderBy: CompanyContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyContact!]
  jobApplications(where: JobApplicationWhereInput, orderBy: JobApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplication!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

type CompanyContact {
  id: ID!
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  company: Company!
  order: Int!
}

type CompanyContactConnection {
  pageInfo: PageInfo!
  edges: [CompanyContactEdge]!
  aggregate: AggregateCompanyContact!
}

input CompanyContactCreateInput {
  id: ID
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  company: CompanyCreateOneWithoutContactsInput!
  order: Int!
}

input CompanyContactCreateManyWithoutCompanyInput {
  create: [CompanyContactCreateWithoutCompanyInput!]
  connect: [CompanyContactWhereUniqueInput!]
}

input CompanyContactCreateWithoutCompanyInput {
  id: ID
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  order: Int!
}

type CompanyContactEdge {
  node: CompanyContact!
  cursor: String!
}

enum CompanyContactOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  position_ASC
  position_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  notes_ASC
  notes_DESC
  order_ASC
  order_DESC
}

type CompanyContactPreviousValues {
  id: ID!
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  order: Int!
}

input CompanyContactScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [CompanyContactScalarWhereInput!]
  OR: [CompanyContactScalarWhereInput!]
  NOT: [CompanyContactScalarWhereInput!]
}

type CompanyContactSubscriptionPayload {
  mutation: MutationType!
  node: CompanyContact
  updatedFields: [String!]
  previousValues: CompanyContactPreviousValues
}

input CompanyContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyContactWhereInput
  AND: [CompanyContactSubscriptionWhereInput!]
  OR: [CompanyContactSubscriptionWhereInput!]
  NOT: [CompanyContactSubscriptionWhereInput!]
}

input CompanyContactUpdateInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  company: CompanyUpdateOneRequiredWithoutContactsInput
  order: Int
}

input CompanyContactUpdateManyDataInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  order: Int
}

input CompanyContactUpdateManyMutationInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  order: Int
}

input CompanyContactUpdateManyWithoutCompanyInput {
  create: [CompanyContactCreateWithoutCompanyInput!]
  delete: [CompanyContactWhereUniqueInput!]
  connect: [CompanyContactWhereUniqueInput!]
  set: [CompanyContactWhereUniqueInput!]
  disconnect: [CompanyContactWhereUniqueInput!]
  update: [CompanyContactUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [CompanyContactUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [CompanyContactScalarWhereInput!]
  updateMany: [CompanyContactUpdateManyWithWhereNestedInput!]
}

input CompanyContactUpdateManyWithWhereNestedInput {
  where: CompanyContactScalarWhereInput!
  data: CompanyContactUpdateManyDataInput!
}

input CompanyContactUpdateWithoutCompanyDataInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  order: Int
}

input CompanyContactUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyContactWhereUniqueInput!
  data: CompanyContactUpdateWithoutCompanyDataInput!
}

input CompanyContactUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyContactWhereUniqueInput!
  update: CompanyContactUpdateWithoutCompanyDataInput!
  create: CompanyContactCreateWithoutCompanyInput!
}

input CompanyContactWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  company: CompanyWhereInput
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [CompanyContactWhereInput!]
  OR: [CompanyContactWhereInput!]
  NOT: [CompanyContactWhereInput!]
}

input CompanyContactWhereUniqueInput {
  id: ID
}

input CompanyCreateInput {
  id: ID
  user: UserCreateOneWithoutCompaniesInput!
  name: String!
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataCreateOneInput
  contacts: CompanyContactCreateManyWithoutCompanyInput
  jobApplications: JobApplicationCreateManyWithoutCompanyInput
}

input CompanyCreateManyWithoutUserInput {
  create: [CompanyCreateWithoutUserInput!]
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateOneWithoutContactsInput {
  create: CompanyCreateWithoutContactsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutJobApplicationsInput {
  create: CompanyCreateWithoutJobApplicationsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutContactsInput {
  id: ID
  user: UserCreateOneWithoutCompaniesInput!
  name: String!
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataCreateOneInput
  jobApplications: JobApplicationCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutJobApplicationsInput {
  id: ID
  user: UserCreateOneWithoutCompaniesInput!
  name: String!
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataCreateOneInput
  contacts: CompanyContactCreateManyWithoutCompanyInput
}

input CompanyCreateWithoutUserInput {
  id: ID
  name: String!
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataCreateOneInput
  contacts: CompanyContactCreateManyWithoutCompanyInput
  jobApplications: JobApplicationCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  website_ASC
  website_DESC
  rating_ASC
  rating_DESC
  notes_ASC
  notes_DESC
  jobApplicationsCount_ASC
  jobApplicationsCount_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CompanyScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  jobApplicationsCount: Int
  jobApplicationsCount_not: Int
  jobApplicationsCount_in: [Int!]
  jobApplicationsCount_not_in: [Int!]
  jobApplicationsCount_lt: Int
  jobApplicationsCount_lte: Int
  jobApplicationsCount_gt: Int
  jobApplicationsCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  user: UserUpdateOneRequiredWithoutCompaniesInput
  name: String
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataUpdateOneInput
  contacts: CompanyContactUpdateManyWithoutCompanyInput
  jobApplications: JobApplicationUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyDataInput {
  name: String
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
}

input CompanyUpdateManyMutationInput {
  name: String
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
}

input CompanyUpdateManyWithoutUserInput {
  create: [CompanyCreateWithoutUserInput!]
  delete: [CompanyWhereUniqueInput!]
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [CompanyScalarWhereInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyDataInput!
}

input CompanyUpdateOneRequiredWithoutContactsInput {
  create: CompanyCreateWithoutContactsInput
  update: CompanyUpdateWithoutContactsDataInput
  upsert: CompanyUpsertWithoutContactsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneRequiredWithoutJobApplicationsInput {
  create: CompanyCreateWithoutJobApplicationsInput
  update: CompanyUpdateWithoutJobApplicationsDataInput
  upsert: CompanyUpsertWithoutJobApplicationsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutContactsDataInput {
  user: UserUpdateOneRequiredWithoutCompaniesInput
  name: String
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataUpdateOneInput
  jobApplications: JobApplicationUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutJobApplicationsDataInput {
  user: UserUpdateOneRequiredWithoutCompaniesInput
  name: String
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataUpdateOneInput
  contacts: CompanyContactUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithoutUserDataInput {
  name: String
  website: String
  rating: Int
  notes: String
  jobApplicationsCount: Int
  image: AwsFileDataUpdateOneInput
  contacts: CompanyContactUpdateManyWithoutCompanyInput
  jobApplications: JobApplicationUpdateManyWithoutCompanyInput
}

input CompanyUpdateWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutUserDataInput!
}

input CompanyUpsertWithoutContactsInput {
  update: CompanyUpdateWithoutContactsDataInput!
  create: CompanyCreateWithoutContactsInput!
}

input CompanyUpsertWithoutJobApplicationsInput {
  update: CompanyUpdateWithoutJobApplicationsDataInput!
  create: CompanyCreateWithoutJobApplicationsInput!
}

input CompanyUpsertWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutUserDataInput!
  create: CompanyCreateWithoutUserInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  website: String
  website_not: String
  website_in: [String!]
  website_not_in: [String!]
  website_lt: String
  website_lte: String
  website_gt: String
  website_gte: String
  website_contains: String
  website_not_contains: String
  website_starts_with: String
  website_not_starts_with: String
  website_ends_with: String
  website_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  jobApplicationsCount: Int
  jobApplicationsCount_not: Int
  jobApplicationsCount_in: [Int!]
  jobApplicationsCount_not_in: [Int!]
  jobApplicationsCount_lt: Int
  jobApplicationsCount_lte: Int
  jobApplicationsCount_gt: Int
  jobApplicationsCount_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  image: AwsFileDataWhereInput
  contacts_every: CompanyContactWhereInput
  contacts_some: CompanyContactWhereInput
  contacts_none: CompanyContactWhereInput
  jobApplications_every: JobApplicationWhereInput
  jobApplications_some: JobApplicationWhereInput
  jobApplications_none: JobApplicationWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar DateTime

type GoogleMapsLocation {
  id: ID!
  name: String!
  googlePlacesId: String!
}

type GoogleMapsLocationConnection {
  pageInfo: PageInfo!
  edges: [GoogleMapsLocationEdge]!
  aggregate: AggregateGoogleMapsLocation!
}

input GoogleMapsLocationCreateInput {
  id: ID
  name: String!
  googlePlacesId: String!
}

input GoogleMapsLocationCreateOneInput {
  create: GoogleMapsLocationCreateInput
  connect: GoogleMapsLocationWhereUniqueInput
}

type GoogleMapsLocationEdge {
  node: GoogleMapsLocation!
  cursor: String!
}

enum GoogleMapsLocationOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  googlePlacesId_ASC
  googlePlacesId_DESC
}

type GoogleMapsLocationPreviousValues {
  id: ID!
  name: String!
  googlePlacesId: String!
}

type GoogleMapsLocationSubscriptionPayload {
  mutation: MutationType!
  node: GoogleMapsLocation
  updatedFields: [String!]
  previousValues: GoogleMapsLocationPreviousValues
}

input GoogleMapsLocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GoogleMapsLocationWhereInput
  AND: [GoogleMapsLocationSubscriptionWhereInput!]
  OR: [GoogleMapsLocationSubscriptionWhereInput!]
  NOT: [GoogleMapsLocationSubscriptionWhereInput!]
}

input GoogleMapsLocationUpdateDataInput {
  name: String
  googlePlacesId: String
}

input GoogleMapsLocationUpdateInput {
  name: String
  googlePlacesId: String
}

input GoogleMapsLocationUpdateManyMutationInput {
  name: String
  googlePlacesId: String
}

input GoogleMapsLocationUpdateOneInput {
  create: GoogleMapsLocationCreateInput
  update: GoogleMapsLocationUpdateDataInput
  upsert: GoogleMapsLocationUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: GoogleMapsLocationWhereUniqueInput
}

input GoogleMapsLocationUpsertNestedInput {
  update: GoogleMapsLocationUpdateDataInput!
  create: GoogleMapsLocationCreateInput!
}

input GoogleMapsLocationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  googlePlacesId: String
  googlePlacesId_not: String
  googlePlacesId_in: [String!]
  googlePlacesId_not_in: [String!]
  googlePlacesId_lt: String
  googlePlacesId_lte: String
  googlePlacesId_gt: String
  googlePlacesId_gte: String
  googlePlacesId_contains: String
  googlePlacesId_not_contains: String
  googlePlacesId_starts_with: String
  googlePlacesId_not_starts_with: String
  googlePlacesId_ends_with: String
  googlePlacesId_not_ends_with: String
  AND: [GoogleMapsLocationWhereInput!]
  OR: [GoogleMapsLocationWhereInput!]
  NOT: [GoogleMapsLocationWhereInput!]
}

input GoogleMapsLocationWhereUniqueInput {
  id: ID
}

type JobApplication {
  id: ID!
  user: User!
  company: Company!
  companyName: String!
  createdAt: DateTime!
  position: String!
  location: GoogleMapsLocation
  locationName: String
  rating: Int
  isRemote: Boolean!
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResume
  notes: String
  isApplicationActive: Boolean!
  dateApplied: DateTime
  dateInterviewing: [DateTime!]!
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  updatedAt: DateTime!
  applicationStatus: ApplicationStatus!
  coverLetterFile: AwsFileData
  contacts(where: JobApplicationContactWhereInput, orderBy: JobApplicationContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplicationContact!]
}

type JobApplicationConnection {
  pageInfo: PageInfo!
  edges: [JobApplicationEdge]!
  aggregate: AggregateJobApplication!
}

type JobApplicationContact {
  id: ID!
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  order: Int!
  jobApplication: JobApplication!
}

type JobApplicationContactConnection {
  pageInfo: PageInfo!
  edges: [JobApplicationContactEdge]!
  aggregate: AggregateJobApplicationContact!
}

input JobApplicationContactCreateInput {
  id: ID
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  order: Int!
  jobApplication: JobApplicationCreateOneWithoutContactsInput!
}

input JobApplicationContactCreateManyWithoutJobApplicationInput {
  create: [JobApplicationContactCreateWithoutJobApplicationInput!]
  connect: [JobApplicationContactWhereUniqueInput!]
}

input JobApplicationContactCreateWithoutJobApplicationInput {
  id: ID
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  order: Int!
}

type JobApplicationContactEdge {
  node: JobApplicationContact!
  cursor: String!
}

enum JobApplicationContactOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  position_ASC
  position_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  notes_ASC
  notes_DESC
  order_ASC
  order_DESC
}

type JobApplicationContactPreviousValues {
  id: ID!
  name: String!
  position: String
  email: String
  phone: String
  notes: String
  order: Int!
}

input JobApplicationContactScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  AND: [JobApplicationContactScalarWhereInput!]
  OR: [JobApplicationContactScalarWhereInput!]
  NOT: [JobApplicationContactScalarWhereInput!]
}

type JobApplicationContactSubscriptionPayload {
  mutation: MutationType!
  node: JobApplicationContact
  updatedFields: [String!]
  previousValues: JobApplicationContactPreviousValues
}

input JobApplicationContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobApplicationContactWhereInput
  AND: [JobApplicationContactSubscriptionWhereInput!]
  OR: [JobApplicationContactSubscriptionWhereInput!]
  NOT: [JobApplicationContactSubscriptionWhereInput!]
}

input JobApplicationContactUpdateInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  order: Int
  jobApplication: JobApplicationUpdateOneRequiredWithoutContactsInput
}

input JobApplicationContactUpdateManyDataInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  order: Int
}

input JobApplicationContactUpdateManyMutationInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  order: Int
}

input JobApplicationContactUpdateManyWithoutJobApplicationInput {
  create: [JobApplicationContactCreateWithoutJobApplicationInput!]
  delete: [JobApplicationContactWhereUniqueInput!]
  connect: [JobApplicationContactWhereUniqueInput!]
  set: [JobApplicationContactWhereUniqueInput!]
  disconnect: [JobApplicationContactWhereUniqueInput!]
  update: [JobApplicationContactUpdateWithWhereUniqueWithoutJobApplicationInput!]
  upsert: [JobApplicationContactUpsertWithWhereUniqueWithoutJobApplicationInput!]
  deleteMany: [JobApplicationContactScalarWhereInput!]
  updateMany: [JobApplicationContactUpdateManyWithWhereNestedInput!]
}

input JobApplicationContactUpdateManyWithWhereNestedInput {
  where: JobApplicationContactScalarWhereInput!
  data: JobApplicationContactUpdateManyDataInput!
}

input JobApplicationContactUpdateWithoutJobApplicationDataInput {
  name: String
  position: String
  email: String
  phone: String
  notes: String
  order: Int
}

input JobApplicationContactUpdateWithWhereUniqueWithoutJobApplicationInput {
  where: JobApplicationContactWhereUniqueInput!
  data: JobApplicationContactUpdateWithoutJobApplicationDataInput!
}

input JobApplicationContactUpsertWithWhereUniqueWithoutJobApplicationInput {
  where: JobApplicationContactWhereUniqueInput!
  update: JobApplicationContactUpdateWithoutJobApplicationDataInput!
  create: JobApplicationContactCreateWithoutJobApplicationInput!
}

input JobApplicationContactWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  order: Int
  order_not: Int
  order_in: [Int!]
  order_not_in: [Int!]
  order_lt: Int
  order_lte: Int
  order_gt: Int
  order_gte: Int
  jobApplication: JobApplicationWhereInput
  AND: [JobApplicationContactWhereInput!]
  OR: [JobApplicationContactWhereInput!]
  NOT: [JobApplicationContactWhereInput!]
}

input JobApplicationContactWhereUniqueInput {
  id: ID
}

input JobApplicationCreatedateInterviewingInput {
  set: [DateTime!]
}

input JobApplicationCreateInput {
  id: ID
  user: UserCreateOneWithoutJobApplicationsInput!
  company: CompanyCreateOneWithoutJobApplicationsInput!
  companyName: String!
  position: String!
  location: GoogleMapsLocationCreateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeCreateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationCreatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataCreateOneInput
  contacts: JobApplicationContactCreateManyWithoutJobApplicationInput
}

input JobApplicationCreateManyWithoutCompanyInput {
  create: [JobApplicationCreateWithoutCompanyInput!]
  connect: [JobApplicationWhereUniqueInput!]
}

input JobApplicationCreateManyWithoutUserInput {
  create: [JobApplicationCreateWithoutUserInput!]
  connect: [JobApplicationWhereUniqueInput!]
}

input JobApplicationCreateOneWithoutContactsInput {
  create: JobApplicationCreateWithoutContactsInput
  connect: JobApplicationWhereUniqueInput
}

input JobApplicationCreateWithoutCompanyInput {
  id: ID
  user: UserCreateOneWithoutJobApplicationsInput!
  companyName: String!
  position: String!
  location: GoogleMapsLocationCreateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeCreateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationCreatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataCreateOneInput
  contacts: JobApplicationContactCreateManyWithoutJobApplicationInput
}

input JobApplicationCreateWithoutContactsInput {
  id: ID
  user: UserCreateOneWithoutJobApplicationsInput!
  company: CompanyCreateOneWithoutJobApplicationsInput!
  companyName: String!
  position: String!
  location: GoogleMapsLocationCreateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeCreateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationCreatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataCreateOneInput
}

input JobApplicationCreateWithoutUserInput {
  id: ID
  company: CompanyCreateOneWithoutJobApplicationsInput!
  companyName: String!
  position: String!
  location: GoogleMapsLocationCreateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeCreateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationCreatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataCreateOneInput
  contacts: JobApplicationContactCreateManyWithoutJobApplicationInput
}

type JobApplicationEdge {
  node: JobApplication!
  cursor: String!
}

enum JobApplicationOrderByInput {
  id_ASC
  id_DESC
  companyName_ASC
  companyName_DESC
  createdAt_ASC
  createdAt_DESC
  position_ASC
  position_DESC
  locationName_ASC
  locationName_DESC
  rating_ASC
  rating_DESC
  isRemote_ASC
  isRemote_DESC
  jobListingLink_ASC
  jobListingLink_DESC
  jobListingNotes_ASC
  jobListingNotes_DESC
  notes_ASC
  notes_DESC
  isApplicationActive_ASC
  isApplicationActive_DESC
  dateApplied_ASC
  dateApplied_DESC
  dateOffered_ASC
  dateOffered_DESC
  dateDecided_ASC
  dateDecided_DESC
  jobDecision_ASC
  jobDecision_DESC
  updatedAt_ASC
  updatedAt_DESC
  applicationStatus_ASC
  applicationStatus_DESC
}

type JobApplicationPreviousValues {
  id: ID!
  companyName: String!
  createdAt: DateTime!
  position: String!
  locationName: String
  rating: Int
  isRemote: Boolean!
  jobListingLink: String
  jobListingNotes: String
  notes: String
  isApplicationActive: Boolean!
  dateApplied: DateTime
  dateInterviewing: [DateTime!]!
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  updatedAt: DateTime!
  applicationStatus: ApplicationStatus!
}

type JobApplicationResume {
  id: ID!
  resume: Resume
  selectedVersionId: String!
}

type JobApplicationResumeConnection {
  pageInfo: PageInfo!
  edges: [JobApplicationResumeEdge]!
  aggregate: AggregateJobApplicationResume!
}

input JobApplicationResumeCreateInput {
  id: ID
  resume: ResumeCreateOneInput
  selectedVersionId: String!
}

input JobApplicationResumeCreateOneInput {
  create: JobApplicationResumeCreateInput
  connect: JobApplicationResumeWhereUniqueInput
}

type JobApplicationResumeEdge {
  node: JobApplicationResume!
  cursor: String!
}

enum JobApplicationResumeOrderByInput {
  id_ASC
  id_DESC
  selectedVersionId_ASC
  selectedVersionId_DESC
}

type JobApplicationResumePreviousValues {
  id: ID!
  selectedVersionId: String!
}

type JobApplicationResumeSubscriptionPayload {
  mutation: MutationType!
  node: JobApplicationResume
  updatedFields: [String!]
  previousValues: JobApplicationResumePreviousValues
}

input JobApplicationResumeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobApplicationResumeWhereInput
  AND: [JobApplicationResumeSubscriptionWhereInput!]
  OR: [JobApplicationResumeSubscriptionWhereInput!]
  NOT: [JobApplicationResumeSubscriptionWhereInput!]
}

input JobApplicationResumeUpdateDataInput {
  resume: ResumeUpdateOneInput
  selectedVersionId: String
}

input JobApplicationResumeUpdateInput {
  resume: ResumeUpdateOneInput
  selectedVersionId: String
}

input JobApplicationResumeUpdateManyMutationInput {
  selectedVersionId: String
}

input JobApplicationResumeUpdateOneInput {
  create: JobApplicationResumeCreateInput
  update: JobApplicationResumeUpdateDataInput
  upsert: JobApplicationResumeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: JobApplicationResumeWhereUniqueInput
}

input JobApplicationResumeUpsertNestedInput {
  update: JobApplicationResumeUpdateDataInput!
  create: JobApplicationResumeCreateInput!
}

input JobApplicationResumeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  resume: ResumeWhereInput
  selectedVersionId: String
  selectedVersionId_not: String
  selectedVersionId_in: [String!]
  selectedVersionId_not_in: [String!]
  selectedVersionId_lt: String
  selectedVersionId_lte: String
  selectedVersionId_gt: String
  selectedVersionId_gte: String
  selectedVersionId_contains: String
  selectedVersionId_not_contains: String
  selectedVersionId_starts_with: String
  selectedVersionId_not_starts_with: String
  selectedVersionId_ends_with: String
  selectedVersionId_not_ends_with: String
  AND: [JobApplicationResumeWhereInput!]
  OR: [JobApplicationResumeWhereInput!]
  NOT: [JobApplicationResumeWhereInput!]
}

input JobApplicationResumeWhereUniqueInput {
  id: ID
}

input JobApplicationScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  companyName: String
  companyName_not: String
  companyName_in: [String!]
  companyName_not_in: [String!]
  companyName_lt: String
  companyName_lte: String
  companyName_gt: String
  companyName_gte: String
  companyName_contains: String
  companyName_not_contains: String
  companyName_starts_with: String
  companyName_not_starts_with: String
  companyName_ends_with: String
  companyName_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  locationName: String
  locationName_not: String
  locationName_in: [String!]
  locationName_not_in: [String!]
  locationName_lt: String
  locationName_lte: String
  locationName_gt: String
  locationName_gte: String
  locationName_contains: String
  locationName_not_contains: String
  locationName_starts_with: String
  locationName_not_starts_with: String
  locationName_ends_with: String
  locationName_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  isRemote: Boolean
  isRemote_not: Boolean
  jobListingLink: String
  jobListingLink_not: String
  jobListingLink_in: [String!]
  jobListingLink_not_in: [String!]
  jobListingLink_lt: String
  jobListingLink_lte: String
  jobListingLink_gt: String
  jobListingLink_gte: String
  jobListingLink_contains: String
  jobListingLink_not_contains: String
  jobListingLink_starts_with: String
  jobListingLink_not_starts_with: String
  jobListingLink_ends_with: String
  jobListingLink_not_ends_with: String
  jobListingNotes: String
  jobListingNotes_not: String
  jobListingNotes_in: [String!]
  jobListingNotes_not_in: [String!]
  jobListingNotes_lt: String
  jobListingNotes_lte: String
  jobListingNotes_gt: String
  jobListingNotes_gte: String
  jobListingNotes_contains: String
  jobListingNotes_not_contains: String
  jobListingNotes_starts_with: String
  jobListingNotes_not_starts_with: String
  jobListingNotes_ends_with: String
  jobListingNotes_not_ends_with: String
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  isApplicationActive: Boolean
  isApplicationActive_not: Boolean
  dateApplied: DateTime
  dateApplied_not: DateTime
  dateApplied_in: [DateTime!]
  dateApplied_not_in: [DateTime!]
  dateApplied_lt: DateTime
  dateApplied_lte: DateTime
  dateApplied_gt: DateTime
  dateApplied_gte: DateTime
  dateOffered: DateTime
  dateOffered_not: DateTime
  dateOffered_in: [DateTime!]
  dateOffered_not_in: [DateTime!]
  dateOffered_lt: DateTime
  dateOffered_lte: DateTime
  dateOffered_gt: DateTime
  dateOffered_gte: DateTime
  dateDecided: DateTime
  dateDecided_not: DateTime
  dateDecided_in: [DateTime!]
  dateDecided_not_in: [DateTime!]
  dateDecided_lt: DateTime
  dateDecided_lte: DateTime
  dateDecided_gt: DateTime
  dateDecided_gte: DateTime
  jobDecision: JobDecision
  jobDecision_not: JobDecision
  jobDecision_in: [JobDecision!]
  jobDecision_not_in: [JobDecision!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  applicationStatus: ApplicationStatus
  applicationStatus_not: ApplicationStatus
  applicationStatus_in: [ApplicationStatus!]
  applicationStatus_not_in: [ApplicationStatus!]
  AND: [JobApplicationScalarWhereInput!]
  OR: [JobApplicationScalarWhereInput!]
  NOT: [JobApplicationScalarWhereInput!]
}

type JobApplicationSubscriptionPayload {
  mutation: MutationType!
  node: JobApplication
  updatedFields: [String!]
  previousValues: JobApplicationPreviousValues
}

input JobApplicationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobApplicationWhereInput
  AND: [JobApplicationSubscriptionWhereInput!]
  OR: [JobApplicationSubscriptionWhereInput!]
  NOT: [JobApplicationSubscriptionWhereInput!]
}

input JobApplicationUpdatedateInterviewingInput {
  set: [DateTime!]
}

input JobApplicationUpdateInput {
  user: UserUpdateOneRequiredWithoutJobApplicationsInput
  company: CompanyUpdateOneRequiredWithoutJobApplicationsInput
  companyName: String
  position: String
  location: GoogleMapsLocationUpdateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeUpdateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationUpdatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataUpdateOneInput
  contacts: JobApplicationContactUpdateManyWithoutJobApplicationInput
}

input JobApplicationUpdateManyDataInput {
  companyName: String
  position: String
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationUpdatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
}

input JobApplicationUpdateManyMutationInput {
  companyName: String
  position: String
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationUpdatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
}

input JobApplicationUpdateManyWithoutCompanyInput {
  create: [JobApplicationCreateWithoutCompanyInput!]
  delete: [JobApplicationWhereUniqueInput!]
  connect: [JobApplicationWhereUniqueInput!]
  set: [JobApplicationWhereUniqueInput!]
  disconnect: [JobApplicationWhereUniqueInput!]
  update: [JobApplicationUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [JobApplicationUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [JobApplicationScalarWhereInput!]
  updateMany: [JobApplicationUpdateManyWithWhereNestedInput!]
}

input JobApplicationUpdateManyWithoutUserInput {
  create: [JobApplicationCreateWithoutUserInput!]
  delete: [JobApplicationWhereUniqueInput!]
  connect: [JobApplicationWhereUniqueInput!]
  set: [JobApplicationWhereUniqueInput!]
  disconnect: [JobApplicationWhereUniqueInput!]
  update: [JobApplicationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [JobApplicationUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [JobApplicationScalarWhereInput!]
  updateMany: [JobApplicationUpdateManyWithWhereNestedInput!]
}

input JobApplicationUpdateManyWithWhereNestedInput {
  where: JobApplicationScalarWhereInput!
  data: JobApplicationUpdateManyDataInput!
}

input JobApplicationUpdateOneRequiredWithoutContactsInput {
  create: JobApplicationCreateWithoutContactsInput
  update: JobApplicationUpdateWithoutContactsDataInput
  upsert: JobApplicationUpsertWithoutContactsInput
  connect: JobApplicationWhereUniqueInput
}

input JobApplicationUpdateWithoutCompanyDataInput {
  user: UserUpdateOneRequiredWithoutJobApplicationsInput
  companyName: String
  position: String
  location: GoogleMapsLocationUpdateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeUpdateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationUpdatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataUpdateOneInput
  contacts: JobApplicationContactUpdateManyWithoutJobApplicationInput
}

input JobApplicationUpdateWithoutContactsDataInput {
  user: UserUpdateOneRequiredWithoutJobApplicationsInput
  company: CompanyUpdateOneRequiredWithoutJobApplicationsInput
  companyName: String
  position: String
  location: GoogleMapsLocationUpdateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeUpdateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationUpdatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataUpdateOneInput
}

input JobApplicationUpdateWithoutUserDataInput {
  company: CompanyUpdateOneRequiredWithoutJobApplicationsInput
  companyName: String
  position: String
  location: GoogleMapsLocationUpdateOneInput
  locationName: String
  rating: Int
  isRemote: Boolean
  jobListingLink: String
  jobListingNotes: String
  resume: JobApplicationResumeUpdateOneInput
  notes: String
  isApplicationActive: Boolean
  dateApplied: DateTime
  dateInterviewing: JobApplicationUpdatedateInterviewingInput
  dateOffered: DateTime
  dateDecided: DateTime
  jobDecision: JobDecision
  applicationStatus: ApplicationStatus
  coverLetterFile: AwsFileDataUpdateOneInput
  contacts: JobApplicationContactUpdateManyWithoutJobApplicationInput
}

input JobApplicationUpdateWithWhereUniqueWithoutCompanyInput {
  where: JobApplicationWhereUniqueInput!
  data: JobApplicationUpdateWithoutCompanyDataInput!
}

input JobApplicationUpdateWithWhereUniqueWithoutUserInput {
  where: JobApplicationWhereUniqueInput!
  data: JobApplicationUpdateWithoutUserDataInput!
}

input JobApplicationUpsertWithoutContactsInput {
  update: JobApplicationUpdateWithoutContactsDataInput!
  create: JobApplicationCreateWithoutContactsInput!
}

input JobApplicationUpsertWithWhereUniqueWithoutCompanyInput {
  where: JobApplicationWhereUniqueInput!
  update: JobApplicationUpdateWithoutCompanyDataInput!
  create: JobApplicationCreateWithoutCompanyInput!
}

input JobApplicationUpsertWithWhereUniqueWithoutUserInput {
  where: JobApplicationWhereUniqueInput!
  update: JobApplicationUpdateWithoutUserDataInput!
  create: JobApplicationCreateWithoutUserInput!
}

input JobApplicationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  company: CompanyWhereInput
  companyName: String
  companyName_not: String
  companyName_in: [String!]
  companyName_not_in: [String!]
  companyName_lt: String
  companyName_lte: String
  companyName_gt: String
  companyName_gte: String
  companyName_contains: String
  companyName_not_contains: String
  companyName_starts_with: String
  companyName_not_starts_with: String
  companyName_ends_with: String
  companyName_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  location: GoogleMapsLocationWhereInput
  locationName: String
  locationName_not: String
  locationName_in: [String!]
  locationName_not_in: [String!]
  locationName_lt: String
  locationName_lte: String
  locationName_gt: String
  locationName_gte: String
  locationName_contains: String
  locationName_not_contains: String
  locationName_starts_with: String
  locationName_not_starts_with: String
  locationName_ends_with: String
  locationName_not_ends_with: String
  rating: Int
  rating_not: Int
  rating_in: [Int!]
  rating_not_in: [Int!]
  rating_lt: Int
  rating_lte: Int
  rating_gt: Int
  rating_gte: Int
  isRemote: Boolean
  isRemote_not: Boolean
  jobListingLink: String
  jobListingLink_not: String
  jobListingLink_in: [String!]
  jobListingLink_not_in: [String!]
  jobListingLink_lt: String
  jobListingLink_lte: String
  jobListingLink_gt: String
  jobListingLink_gte: String
  jobListingLink_contains: String
  jobListingLink_not_contains: String
  jobListingLink_starts_with: String
  jobListingLink_not_starts_with: String
  jobListingLink_ends_with: String
  jobListingLink_not_ends_with: String
  jobListingNotes: String
  jobListingNotes_not: String
  jobListingNotes_in: [String!]
  jobListingNotes_not_in: [String!]
  jobListingNotes_lt: String
  jobListingNotes_lte: String
  jobListingNotes_gt: String
  jobListingNotes_gte: String
  jobListingNotes_contains: String
  jobListingNotes_not_contains: String
  jobListingNotes_starts_with: String
  jobListingNotes_not_starts_with: String
  jobListingNotes_ends_with: String
  jobListingNotes_not_ends_with: String
  resume: JobApplicationResumeWhereInput
  notes: String
  notes_not: String
  notes_in: [String!]
  notes_not_in: [String!]
  notes_lt: String
  notes_lte: String
  notes_gt: String
  notes_gte: String
  notes_contains: String
  notes_not_contains: String
  notes_starts_with: String
  notes_not_starts_with: String
  notes_ends_with: String
  notes_not_ends_with: String
  isApplicationActive: Boolean
  isApplicationActive_not: Boolean
  dateApplied: DateTime
  dateApplied_not: DateTime
  dateApplied_in: [DateTime!]
  dateApplied_not_in: [DateTime!]
  dateApplied_lt: DateTime
  dateApplied_lte: DateTime
  dateApplied_gt: DateTime
  dateApplied_gte: DateTime
  dateOffered: DateTime
  dateOffered_not: DateTime
  dateOffered_in: [DateTime!]
  dateOffered_not_in: [DateTime!]
  dateOffered_lt: DateTime
  dateOffered_lte: DateTime
  dateOffered_gt: DateTime
  dateOffered_gte: DateTime
  dateDecided: DateTime
  dateDecided_not: DateTime
  dateDecided_in: [DateTime!]
  dateDecided_not_in: [DateTime!]
  dateDecided_lt: DateTime
  dateDecided_lte: DateTime
  dateDecided_gt: DateTime
  dateDecided_gte: DateTime
  jobDecision: JobDecision
  jobDecision_not: JobDecision
  jobDecision_in: [JobDecision!]
  jobDecision_not_in: [JobDecision!]
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  applicationStatus: ApplicationStatus
  applicationStatus_not: ApplicationStatus
  applicationStatus_in: [ApplicationStatus!]
  applicationStatus_not_in: [ApplicationStatus!]
  coverLetterFile: AwsFileDataWhereInput
  contacts_every: JobApplicationContactWhereInput
  contacts_some: JobApplicationContactWhereInput
  contacts_none: JobApplicationContactWhereInput
  AND: [JobApplicationWhereInput!]
  OR: [JobApplicationWhereInput!]
  NOT: [JobApplicationWhereInput!]
}

input JobApplicationWhereUniqueInput {
  id: ID
}

enum JobDecision {
  REJECTED
  ACCEPTED
  DECLINED
}

scalar Long

type Mutation {
  createAwsFileData(data: AwsFileDataCreateInput!): AwsFileData!
  updateAwsFileData(data: AwsFileDataUpdateInput!, where: AwsFileDataWhereUniqueInput!): AwsFileData
  updateManyAwsFileDatas(data: AwsFileDataUpdateManyMutationInput!, where: AwsFileDataWhereInput): BatchPayload!
  upsertAwsFileData(where: AwsFileDataWhereUniqueInput!, create: AwsFileDataCreateInput!, update: AwsFileDataUpdateInput!): AwsFileData!
  deleteAwsFileData(where: AwsFileDataWhereUniqueInput!): AwsFileData
  deleteManyAwsFileDatas(where: AwsFileDataWhereInput): BatchPayload!
  createBillingInfo(data: BillingInfoCreateInput!): BillingInfo!
  updateBillingInfo(data: BillingInfoUpdateInput!, where: BillingInfoWhereUniqueInput!): BillingInfo
  updateManyBillingInfoes(data: BillingInfoUpdateManyMutationInput!, where: BillingInfoWhereInput): BatchPayload!
  upsertBillingInfo(where: BillingInfoWhereUniqueInput!, create: BillingInfoCreateInput!, update: BillingInfoUpdateInput!): BillingInfo!
  deleteBillingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  deleteManyBillingInfoes(where: BillingInfoWhereInput): BatchPayload!
  createCard(data: CardCreateInput!): Card!
  updateCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card
  updateManyCards(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  upsertCard(where: CardWhereUniqueInput!, create: CardCreateInput!, update: CardUpdateInput!): Card!
  deleteCard(where: CardWhereUniqueInput!): Card
  deleteManyCards(where: CardWhereInput): BatchPayload!
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createCompanyContact(data: CompanyContactCreateInput!): CompanyContact!
  updateCompanyContact(data: CompanyContactUpdateInput!, where: CompanyContactWhereUniqueInput!): CompanyContact
  updateManyCompanyContacts(data: CompanyContactUpdateManyMutationInput!, where: CompanyContactWhereInput): BatchPayload!
  upsertCompanyContact(where: CompanyContactWhereUniqueInput!, create: CompanyContactCreateInput!, update: CompanyContactUpdateInput!): CompanyContact!
  deleteCompanyContact(where: CompanyContactWhereUniqueInput!): CompanyContact
  deleteManyCompanyContacts(where: CompanyContactWhereInput): BatchPayload!
  createGoogleMapsLocation(data: GoogleMapsLocationCreateInput!): GoogleMapsLocation!
  updateGoogleMapsLocation(data: GoogleMapsLocationUpdateInput!, where: GoogleMapsLocationWhereUniqueInput!): GoogleMapsLocation
  updateManyGoogleMapsLocations(data: GoogleMapsLocationUpdateManyMutationInput!, where: GoogleMapsLocationWhereInput): BatchPayload!
  upsertGoogleMapsLocation(where: GoogleMapsLocationWhereUniqueInput!, create: GoogleMapsLocationCreateInput!, update: GoogleMapsLocationUpdateInput!): GoogleMapsLocation!
  deleteGoogleMapsLocation(where: GoogleMapsLocationWhereUniqueInput!): GoogleMapsLocation
  deleteManyGoogleMapsLocations(where: GoogleMapsLocationWhereInput): BatchPayload!
  createJobApplication(data: JobApplicationCreateInput!): JobApplication!
  updateJobApplication(data: JobApplicationUpdateInput!, where: JobApplicationWhereUniqueInput!): JobApplication
  updateManyJobApplications(data: JobApplicationUpdateManyMutationInput!, where: JobApplicationWhereInput): BatchPayload!
  upsertJobApplication(where: JobApplicationWhereUniqueInput!, create: JobApplicationCreateInput!, update: JobApplicationUpdateInput!): JobApplication!
  deleteJobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  deleteManyJobApplications(where: JobApplicationWhereInput): BatchPayload!
  createJobApplicationContact(data: JobApplicationContactCreateInput!): JobApplicationContact!
  updateJobApplicationContact(data: JobApplicationContactUpdateInput!, where: JobApplicationContactWhereUniqueInput!): JobApplicationContact
  updateManyJobApplicationContacts(data: JobApplicationContactUpdateManyMutationInput!, where: JobApplicationContactWhereInput): BatchPayload!
  upsertJobApplicationContact(where: JobApplicationContactWhereUniqueInput!, create: JobApplicationContactCreateInput!, update: JobApplicationContactUpdateInput!): JobApplicationContact!
  deleteJobApplicationContact(where: JobApplicationContactWhereUniqueInput!): JobApplicationContact
  deleteManyJobApplicationContacts(where: JobApplicationContactWhereInput): BatchPayload!
  createJobApplicationResume(data: JobApplicationResumeCreateInput!): JobApplicationResume!
  updateJobApplicationResume(data: JobApplicationResumeUpdateInput!, where: JobApplicationResumeWhereUniqueInput!): JobApplicationResume
  updateManyJobApplicationResumes(data: JobApplicationResumeUpdateManyMutationInput!, where: JobApplicationResumeWhereInput): BatchPayload!
  upsertJobApplicationResume(where: JobApplicationResumeWhereUniqueInput!, create: JobApplicationResumeCreateInput!, update: JobApplicationResumeUpdateInput!): JobApplicationResume!
  deleteJobApplicationResume(where: JobApplicationResumeWhereUniqueInput!): JobApplicationResume
  deleteManyJobApplicationResumes(where: JobApplicationResumeWhereInput): BatchPayload!
  createResume(data: ResumeCreateInput!): Resume!
  updateResume(data: ResumeUpdateInput!, where: ResumeWhereUniqueInput!): Resume
  updateManyResumes(data: ResumeUpdateManyMutationInput!, where: ResumeWhereInput): BatchPayload!
  upsertResume(where: ResumeWhereUniqueInput!, create: ResumeCreateInput!, update: ResumeUpdateInput!): Resume!
  deleteResume(where: ResumeWhereUniqueInput!): Resume
  deleteManyResumes(where: ResumeWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  awsFileData(where: AwsFileDataWhereUniqueInput!): AwsFileData
  awsFileDatas(where: AwsFileDataWhereInput, orderBy: AwsFileDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AwsFileData]!
  awsFileDatasConnection(where: AwsFileDataWhereInput, orderBy: AwsFileDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AwsFileDataConnection!
  billingInfo(where: BillingInfoWhereUniqueInput!): BillingInfo
  billingInfoes(where: BillingInfoWhereInput, orderBy: BillingInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BillingInfo]!
  billingInfoesConnection(where: BillingInfoWhereInput, orderBy: BillingInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BillingInfoConnection!
  card(where: CardWhereUniqueInput!): Card
  cards(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Card]!
  cardsConnection(where: CardWhereInput, orderBy: CardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CardConnection!
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  companyContact(where: CompanyContactWhereUniqueInput!): CompanyContact
  companyContacts(where: CompanyContactWhereInput, orderBy: CompanyContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CompanyContact]!
  companyContactsConnection(where: CompanyContactWhereInput, orderBy: CompanyContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyContactConnection!
  googleMapsLocation(where: GoogleMapsLocationWhereUniqueInput!): GoogleMapsLocation
  googleMapsLocations(where: GoogleMapsLocationWhereInput, orderBy: GoogleMapsLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GoogleMapsLocation]!
  googleMapsLocationsConnection(where: GoogleMapsLocationWhereInput, orderBy: GoogleMapsLocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GoogleMapsLocationConnection!
  jobApplication(where: JobApplicationWhereUniqueInput!): JobApplication
  jobApplications(where: JobApplicationWhereInput, orderBy: JobApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplication]!
  jobApplicationsConnection(where: JobApplicationWhereInput, orderBy: JobApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobApplicationConnection!
  jobApplicationContact(where: JobApplicationContactWhereUniqueInput!): JobApplicationContact
  jobApplicationContacts(where: JobApplicationContactWhereInput, orderBy: JobApplicationContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplicationContact]!
  jobApplicationContactsConnection(where: JobApplicationContactWhereInput, orderBy: JobApplicationContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobApplicationContactConnection!
  jobApplicationResume(where: JobApplicationResumeWhereUniqueInput!): JobApplicationResume
  jobApplicationResumes(where: JobApplicationResumeWhereInput, orderBy: JobApplicationResumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplicationResume]!
  jobApplicationResumesConnection(where: JobApplicationResumeWhereInput, orderBy: JobApplicationResumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobApplicationResumeConnection!
  resume(where: ResumeWhereUniqueInput!): Resume
  resumes(where: ResumeWhereInput, orderBy: ResumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resume]!
  resumesConnection(where: ResumeWhereInput, orderBy: ResumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResumeConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Resume {
  id: ID!
  name: String!
  updatedAt: DateTime!
  user: User!
  versions(where: AwsFileDataWhereInput, orderBy: AwsFileDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AwsFileData!]
  createdAt: DateTime!
}

type ResumeConnection {
  pageInfo: PageInfo!
  edges: [ResumeEdge]!
  aggregate: AggregateResume!
}

input ResumeCreateInput {
  id: ID
  name: String!
  user: UserCreateOneWithoutResumesInput!
  versions: AwsFileDataCreateManyInput
}

input ResumeCreateManyWithoutUserInput {
  create: [ResumeCreateWithoutUserInput!]
  connect: [ResumeWhereUniqueInput!]
}

input ResumeCreateOneInput {
  create: ResumeCreateInput
  connect: ResumeWhereUniqueInput
}

input ResumeCreateWithoutUserInput {
  id: ID
  name: String!
  versions: AwsFileDataCreateManyInput
}

type ResumeEdge {
  node: Resume!
  cursor: String!
}

enum ResumeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ResumePreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

input ResumeScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ResumeScalarWhereInput!]
  OR: [ResumeScalarWhereInput!]
  NOT: [ResumeScalarWhereInput!]
}

type ResumeSubscriptionPayload {
  mutation: MutationType!
  node: Resume
  updatedFields: [String!]
  previousValues: ResumePreviousValues
}

input ResumeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResumeWhereInput
  AND: [ResumeSubscriptionWhereInput!]
  OR: [ResumeSubscriptionWhereInput!]
  NOT: [ResumeSubscriptionWhereInput!]
}

input ResumeUpdateDataInput {
  name: String
  user: UserUpdateOneRequiredWithoutResumesInput
  versions: AwsFileDataUpdateManyInput
}

input ResumeUpdateInput {
  name: String
  user: UserUpdateOneRequiredWithoutResumesInput
  versions: AwsFileDataUpdateManyInput
}

input ResumeUpdateManyDataInput {
  name: String
}

input ResumeUpdateManyMutationInput {
  name: String
}

input ResumeUpdateManyWithoutUserInput {
  create: [ResumeCreateWithoutUserInput!]
  delete: [ResumeWhereUniqueInput!]
  connect: [ResumeWhereUniqueInput!]
  set: [ResumeWhereUniqueInput!]
  disconnect: [ResumeWhereUniqueInput!]
  update: [ResumeUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ResumeUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [ResumeScalarWhereInput!]
  updateMany: [ResumeUpdateManyWithWhereNestedInput!]
}

input ResumeUpdateManyWithWhereNestedInput {
  where: ResumeScalarWhereInput!
  data: ResumeUpdateManyDataInput!
}

input ResumeUpdateOneInput {
  create: ResumeCreateInput
  update: ResumeUpdateDataInput
  upsert: ResumeUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: ResumeWhereUniqueInput
}

input ResumeUpdateWithoutUserDataInput {
  name: String
  versions: AwsFileDataUpdateManyInput
}

input ResumeUpdateWithWhereUniqueWithoutUserInput {
  where: ResumeWhereUniqueInput!
  data: ResumeUpdateWithoutUserDataInput!
}

input ResumeUpsertNestedInput {
  update: ResumeUpdateDataInput!
  create: ResumeCreateInput!
}

input ResumeUpsertWithWhereUniqueWithoutUserInput {
  where: ResumeWhereUniqueInput!
  update: ResumeUpdateWithoutUserDataInput!
  create: ResumeCreateWithoutUserInput!
}

input ResumeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  user: UserWhereInput
  versions_every: AwsFileDataWhereInput
  versions_some: AwsFileDataWhereInput
  versions_none: AwsFileDataWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
}

input ResumeWhereUniqueInput {
  id: ID
}

type Subscription {
  awsFileData(where: AwsFileDataSubscriptionWhereInput): AwsFileDataSubscriptionPayload
  billingInfo(where: BillingInfoSubscriptionWhereInput): BillingInfoSubscriptionPayload
  card(where: CardSubscriptionWhereInput): CardSubscriptionPayload
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  companyContact(where: CompanyContactSubscriptionWhereInput): CompanyContactSubscriptionPayload
  googleMapsLocation(where: GoogleMapsLocationSubscriptionWhereInput): GoogleMapsLocationSubscriptionPayload
  jobApplication(where: JobApplicationSubscriptionWhereInput): JobApplicationSubscriptionPayload
  jobApplicationContact(where: JobApplicationContactSubscriptionWhereInput): JobApplicationContactSubscriptionPayload
  jobApplicationResume(where: JobApplicationResumeSubscriptionWhereInput): JobApplicationResumeSubscriptionPayload
  resume(where: ResumeSubscriptionWhereInput): ResumeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean!
  googleId: String
  email: String!
  password: String
  billing: BillingInfo
  jobApplications(where: JobApplicationWhereInput, orderBy: JobApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [JobApplication!]
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company!]
  resumes(where: ResumeWhereInput, orderBy: ResumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resume!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String!
  password: String
  billing: BillingInfoCreateOneWithoutUserInput
  jobApplications: JobApplicationCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutUserInput
  resumes: ResumeCreateManyWithoutUserInput
}

input UserCreateOneWithoutBillingInput {
  create: UserCreateWithoutBillingInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutJobApplicationsInput {
  create: UserCreateWithoutJobApplicationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutResumesInput {
  create: UserCreateWithoutResumesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBillingInput {
  id: ID
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String!
  password: String
  jobApplications: JobApplicationCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutUserInput
  resumes: ResumeCreateManyWithoutUserInput
}

input UserCreateWithoutCompaniesInput {
  id: ID
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String!
  password: String
  billing: BillingInfoCreateOneWithoutUserInput
  jobApplications: JobApplicationCreateManyWithoutUserInput
  resumes: ResumeCreateManyWithoutUserInput
}

input UserCreateWithoutJobApplicationsInput {
  id: ID
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String!
  password: String
  billing: BillingInfoCreateOneWithoutUserInput
  companies: CompanyCreateManyWithoutUserInput
  resumes: ResumeCreateManyWithoutUserInput
}

input UserCreateWithoutResumesInput {
  id: ID
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String!
  password: String
  billing: BillingInfoCreateOneWithoutUserInput
  jobApplications: JobApplicationCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutUserInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  emailConfirmationToken_ASC
  emailConfirmationToken_DESC
  hasVerifiedEmail_ASC
  hasVerifiedEmail_DESC
  hasCompletedOnboarding_ASC
  hasCompletedOnboarding_DESC
  googleId_ASC
  googleId_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean!
  googleId: String
  email: String!
  password: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String
  password: String
  billing: BillingInfoUpdateOneWithoutUserInput
  jobApplications: JobApplicationUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutUserInput
  resumes: ResumeUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String
  password: String
}

input UserUpdateOneRequiredWithoutBillingInput {
  create: UserCreateWithoutBillingInput
  update: UserUpdateWithoutBillingDataInput
  upsert: UserUpsertWithoutBillingInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput
  update: UserUpdateWithoutCompaniesDataInput
  upsert: UserUpsertWithoutCompaniesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutJobApplicationsInput {
  create: UserCreateWithoutJobApplicationsInput
  update: UserUpdateWithoutJobApplicationsDataInput
  upsert: UserUpsertWithoutJobApplicationsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutResumesInput {
  create: UserCreateWithoutResumesInput
  update: UserUpdateWithoutResumesDataInput
  upsert: UserUpsertWithoutResumesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutBillingDataInput {
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String
  password: String
  jobApplications: JobApplicationUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutUserInput
  resumes: ResumeUpdateManyWithoutUserInput
}

input UserUpdateWithoutCompaniesDataInput {
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String
  password: String
  billing: BillingInfoUpdateOneWithoutUserInput
  jobApplications: JobApplicationUpdateManyWithoutUserInput
  resumes: ResumeUpdateManyWithoutUserInput
}

input UserUpdateWithoutJobApplicationsDataInput {
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String
  password: String
  billing: BillingInfoUpdateOneWithoutUserInput
  companies: CompanyUpdateManyWithoutUserInput
  resumes: ResumeUpdateManyWithoutUserInput
}

input UserUpdateWithoutResumesDataInput {
  resetToken: String
  resetTokenExpiry: Float
  emailConfirmationToken: String
  hasVerifiedEmail: Boolean
  hasCompletedOnboarding: Boolean
  googleId: String
  email: String
  password: String
  billing: BillingInfoUpdateOneWithoutUserInput
  jobApplications: JobApplicationUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutUserInput
}

input UserUpsertWithoutBillingInput {
  update: UserUpdateWithoutBillingDataInput!
  create: UserCreateWithoutBillingInput!
}

input UserUpsertWithoutCompaniesInput {
  update: UserUpdateWithoutCompaniesDataInput!
  create: UserCreateWithoutCompaniesInput!
}

input UserUpsertWithoutJobApplicationsInput {
  update: UserUpdateWithoutJobApplicationsDataInput!
  create: UserCreateWithoutJobApplicationsInput!
}

input UserUpsertWithoutResumesInput {
  update: UserUpdateWithoutResumesDataInput!
  create: UserCreateWithoutResumesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  emailConfirmationToken: String
  emailConfirmationToken_not: String
  emailConfirmationToken_in: [String!]
  emailConfirmationToken_not_in: [String!]
  emailConfirmationToken_lt: String
  emailConfirmationToken_lte: String
  emailConfirmationToken_gt: String
  emailConfirmationToken_gte: String
  emailConfirmationToken_contains: String
  emailConfirmationToken_not_contains: String
  emailConfirmationToken_starts_with: String
  emailConfirmationToken_not_starts_with: String
  emailConfirmationToken_ends_with: String
  emailConfirmationToken_not_ends_with: String
  hasVerifiedEmail: Boolean
  hasVerifiedEmail_not: Boolean
  hasCompletedOnboarding: Boolean
  hasCompletedOnboarding_not: Boolean
  googleId: String
  googleId_not: String
  googleId_in: [String!]
  googleId_not_in: [String!]
  googleId_lt: String
  googleId_lte: String
  googleId_gt: String
  googleId_gte: String
  googleId_contains: String
  googleId_not_contains: String
  googleId_starts_with: String
  googleId_not_starts_with: String
  googleId_ends_with: String
  googleId_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  billing: BillingInfoWhereInput
  jobApplications_every: JobApplicationWhereInput
  jobApplications_some: JobApplicationWhereInput
  jobApplications_none: JobApplicationWhereInput
  companies_every: CompanyWhereInput
  companies_some: CompanyWhereInput
  companies_none: CompanyWhereInput
  resumes_every: ResumeWhereInput
  resumes_some: ResumeWhereInput
  resumes_none: ResumeWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  googleId: String
  email: String
}
`