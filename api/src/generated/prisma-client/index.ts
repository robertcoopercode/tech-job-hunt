// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  awsFileData: (where?: AwsFileDataWhereInput) => Promise<boolean>;
  billingInfo: (where?: BillingInfoWhereInput) => Promise<boolean>;
  card: (where?: CardWhereInput) => Promise<boolean>;
  company: (where?: CompanyWhereInput) => Promise<boolean>;
  companyContact: (where?: CompanyContactWhereInput) => Promise<boolean>;
  googleMapsLocation: (
    where?: GoogleMapsLocationWhereInput
  ) => Promise<boolean>;
  jobApplication: (where?: JobApplicationWhereInput) => Promise<boolean>;
  jobApplicationContact: (
    where?: JobApplicationContactWhereInput
  ) => Promise<boolean>;
  jobApplicationResume: (
    where?: JobApplicationResumeWhereInput
  ) => Promise<boolean>;
  resume: (where?: ResumeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  awsFileData: (
    where: AwsFileDataWhereUniqueInput
  ) => AwsFileDataNullablePromise;
  awsFileDatas: (args?: {
    where?: AwsFileDataWhereInput;
    orderBy?: AwsFileDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AwsFileData>;
  awsFileDatasConnection: (args?: {
    where?: AwsFileDataWhereInput;
    orderBy?: AwsFileDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AwsFileDataConnectionPromise;
  billingInfo: (
    where: BillingInfoWhereUniqueInput
  ) => BillingInfoNullablePromise;
  billingInfoes: (args?: {
    where?: BillingInfoWhereInput;
    orderBy?: BillingInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<BillingInfo>;
  billingInfoesConnection: (args?: {
    where?: BillingInfoWhereInput;
    orderBy?: BillingInfoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => BillingInfoConnectionPromise;
  card: (where: CardWhereUniqueInput) => CardNullablePromise;
  cards: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Card>;
  cardsConnection: (args?: {
    where?: CardWhereInput;
    orderBy?: CardOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CardConnectionPromise;
  company: (where: CompanyWhereUniqueInput) => CompanyNullablePromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  companyContact: (
    where: CompanyContactWhereUniqueInput
  ) => CompanyContactNullablePromise;
  companyContacts: (args?: {
    where?: CompanyContactWhereInput;
    orderBy?: CompanyContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CompanyContact>;
  companyContactsConnection: (args?: {
    where?: CompanyContactWhereInput;
    orderBy?: CompanyContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyContactConnectionPromise;
  googleMapsLocation: (
    where: GoogleMapsLocationWhereUniqueInput
  ) => GoogleMapsLocationNullablePromise;
  googleMapsLocations: (args?: {
    where?: GoogleMapsLocationWhereInput;
    orderBy?: GoogleMapsLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<GoogleMapsLocation>;
  googleMapsLocationsConnection: (args?: {
    where?: GoogleMapsLocationWhereInput;
    orderBy?: GoogleMapsLocationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GoogleMapsLocationConnectionPromise;
  jobApplication: (
    where: JobApplicationWhereUniqueInput
  ) => JobApplicationNullablePromise;
  jobApplications: (args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<JobApplication>;
  jobApplicationsConnection: (args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobApplicationConnectionPromise;
  jobApplicationContact: (
    where: JobApplicationContactWhereUniqueInput
  ) => JobApplicationContactNullablePromise;
  jobApplicationContacts: (args?: {
    where?: JobApplicationContactWhereInput;
    orderBy?: JobApplicationContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<JobApplicationContact>;
  jobApplicationContactsConnection: (args?: {
    where?: JobApplicationContactWhereInput;
    orderBy?: JobApplicationContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobApplicationContactConnectionPromise;
  jobApplicationResume: (
    where: JobApplicationResumeWhereUniqueInput
  ) => JobApplicationResumeNullablePromise;
  jobApplicationResumes: (args?: {
    where?: JobApplicationResumeWhereInput;
    orderBy?: JobApplicationResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<JobApplicationResume>;
  jobApplicationResumesConnection: (args?: {
    where?: JobApplicationResumeWhereInput;
    orderBy?: JobApplicationResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JobApplicationResumeConnectionPromise;
  resume: (where: ResumeWhereUniqueInput) => ResumeNullablePromise;
  resumes: (args?: {
    where?: ResumeWhereInput;
    orderBy?: ResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Resume>;
  resumesConnection: (args?: {
    where?: ResumeWhereInput;
    orderBy?: ResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ResumeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAwsFileData: (data: AwsFileDataCreateInput) => AwsFileDataPromise;
  updateAwsFileData: (args: {
    data: AwsFileDataUpdateInput;
    where: AwsFileDataWhereUniqueInput;
  }) => AwsFileDataPromise;
  updateManyAwsFileDatas: (args: {
    data: AwsFileDataUpdateManyMutationInput;
    where?: AwsFileDataWhereInput;
  }) => BatchPayloadPromise;
  upsertAwsFileData: (args: {
    where: AwsFileDataWhereUniqueInput;
    create: AwsFileDataCreateInput;
    update: AwsFileDataUpdateInput;
  }) => AwsFileDataPromise;
  deleteAwsFileData: (where: AwsFileDataWhereUniqueInput) => AwsFileDataPromise;
  deleteManyAwsFileDatas: (
    where?: AwsFileDataWhereInput
  ) => BatchPayloadPromise;
  createBillingInfo: (data: BillingInfoCreateInput) => BillingInfoPromise;
  updateBillingInfo: (args: {
    data: BillingInfoUpdateInput;
    where: BillingInfoWhereUniqueInput;
  }) => BillingInfoPromise;
  updateManyBillingInfoes: (args: {
    data: BillingInfoUpdateManyMutationInput;
    where?: BillingInfoWhereInput;
  }) => BatchPayloadPromise;
  upsertBillingInfo: (args: {
    where: BillingInfoWhereUniqueInput;
    create: BillingInfoCreateInput;
    update: BillingInfoUpdateInput;
  }) => BillingInfoPromise;
  deleteBillingInfo: (where: BillingInfoWhereUniqueInput) => BillingInfoPromise;
  deleteManyBillingInfoes: (
    where?: BillingInfoWhereInput
  ) => BatchPayloadPromise;
  createCard: (data: CardCreateInput) => CardPromise;
  updateCard: (args: {
    data: CardUpdateInput;
    where: CardWhereUniqueInput;
  }) => CardPromise;
  updateManyCards: (args: {
    data: CardUpdateManyMutationInput;
    where?: CardWhereInput;
  }) => BatchPayloadPromise;
  upsertCard: (args: {
    where: CardWhereUniqueInput;
    create: CardCreateInput;
    update: CardUpdateInput;
  }) => CardPromise;
  deleteCard: (where: CardWhereUniqueInput) => CardPromise;
  deleteManyCards: (where?: CardWhereInput) => BatchPayloadPromise;
  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;
  createCompanyContact: (
    data: CompanyContactCreateInput
  ) => CompanyContactPromise;
  updateCompanyContact: (args: {
    data: CompanyContactUpdateInput;
    where: CompanyContactWhereUniqueInput;
  }) => CompanyContactPromise;
  updateManyCompanyContacts: (args: {
    data: CompanyContactUpdateManyMutationInput;
    where?: CompanyContactWhereInput;
  }) => BatchPayloadPromise;
  upsertCompanyContact: (args: {
    where: CompanyContactWhereUniqueInput;
    create: CompanyContactCreateInput;
    update: CompanyContactUpdateInput;
  }) => CompanyContactPromise;
  deleteCompanyContact: (
    where: CompanyContactWhereUniqueInput
  ) => CompanyContactPromise;
  deleteManyCompanyContacts: (
    where?: CompanyContactWhereInput
  ) => BatchPayloadPromise;
  createGoogleMapsLocation: (
    data: GoogleMapsLocationCreateInput
  ) => GoogleMapsLocationPromise;
  updateGoogleMapsLocation: (args: {
    data: GoogleMapsLocationUpdateInput;
    where: GoogleMapsLocationWhereUniqueInput;
  }) => GoogleMapsLocationPromise;
  updateManyGoogleMapsLocations: (args: {
    data: GoogleMapsLocationUpdateManyMutationInput;
    where?: GoogleMapsLocationWhereInput;
  }) => BatchPayloadPromise;
  upsertGoogleMapsLocation: (args: {
    where: GoogleMapsLocationWhereUniqueInput;
    create: GoogleMapsLocationCreateInput;
    update: GoogleMapsLocationUpdateInput;
  }) => GoogleMapsLocationPromise;
  deleteGoogleMapsLocation: (
    where: GoogleMapsLocationWhereUniqueInput
  ) => GoogleMapsLocationPromise;
  deleteManyGoogleMapsLocations: (
    where?: GoogleMapsLocationWhereInput
  ) => BatchPayloadPromise;
  createJobApplication: (
    data: JobApplicationCreateInput
  ) => JobApplicationPromise;
  updateJobApplication: (args: {
    data: JobApplicationUpdateInput;
    where: JobApplicationWhereUniqueInput;
  }) => JobApplicationPromise;
  updateManyJobApplications: (args: {
    data: JobApplicationUpdateManyMutationInput;
    where?: JobApplicationWhereInput;
  }) => BatchPayloadPromise;
  upsertJobApplication: (args: {
    where: JobApplicationWhereUniqueInput;
    create: JobApplicationCreateInput;
    update: JobApplicationUpdateInput;
  }) => JobApplicationPromise;
  deleteJobApplication: (
    where: JobApplicationWhereUniqueInput
  ) => JobApplicationPromise;
  deleteManyJobApplications: (
    where?: JobApplicationWhereInput
  ) => BatchPayloadPromise;
  createJobApplicationContact: (
    data: JobApplicationContactCreateInput
  ) => JobApplicationContactPromise;
  updateJobApplicationContact: (args: {
    data: JobApplicationContactUpdateInput;
    where: JobApplicationContactWhereUniqueInput;
  }) => JobApplicationContactPromise;
  updateManyJobApplicationContacts: (args: {
    data: JobApplicationContactUpdateManyMutationInput;
    where?: JobApplicationContactWhereInput;
  }) => BatchPayloadPromise;
  upsertJobApplicationContact: (args: {
    where: JobApplicationContactWhereUniqueInput;
    create: JobApplicationContactCreateInput;
    update: JobApplicationContactUpdateInput;
  }) => JobApplicationContactPromise;
  deleteJobApplicationContact: (
    where: JobApplicationContactWhereUniqueInput
  ) => JobApplicationContactPromise;
  deleteManyJobApplicationContacts: (
    where?: JobApplicationContactWhereInput
  ) => BatchPayloadPromise;
  createJobApplicationResume: (
    data: JobApplicationResumeCreateInput
  ) => JobApplicationResumePromise;
  updateJobApplicationResume: (args: {
    data: JobApplicationResumeUpdateInput;
    where: JobApplicationResumeWhereUniqueInput;
  }) => JobApplicationResumePromise;
  updateManyJobApplicationResumes: (args: {
    data: JobApplicationResumeUpdateManyMutationInput;
    where?: JobApplicationResumeWhereInput;
  }) => BatchPayloadPromise;
  upsertJobApplicationResume: (args: {
    where: JobApplicationResumeWhereUniqueInput;
    create: JobApplicationResumeCreateInput;
    update: JobApplicationResumeUpdateInput;
  }) => JobApplicationResumePromise;
  deleteJobApplicationResume: (
    where: JobApplicationResumeWhereUniqueInput
  ) => JobApplicationResumePromise;
  deleteManyJobApplicationResumes: (
    where?: JobApplicationResumeWhereInput
  ) => BatchPayloadPromise;
  createResume: (data: ResumeCreateInput) => ResumePromise;
  updateResume: (args: {
    data: ResumeUpdateInput;
    where: ResumeWhereUniqueInput;
  }) => ResumePromise;
  updateManyResumes: (args: {
    data: ResumeUpdateManyMutationInput;
    where?: ResumeWhereInput;
  }) => BatchPayloadPromise;
  upsertResume: (args: {
    where: ResumeWhereUniqueInput;
    create: ResumeCreateInput;
    update: ResumeUpdateInput;
  }) => ResumePromise;
  deleteResume: (where: ResumeWhereUniqueInput) => ResumePromise;
  deleteManyResumes: (where?: ResumeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  awsFileData: (
    where?: AwsFileDataSubscriptionWhereInput
  ) => AwsFileDataSubscriptionPayloadSubscription;
  billingInfo: (
    where?: BillingInfoSubscriptionWhereInput
  ) => BillingInfoSubscriptionPayloadSubscription;
  card: (
    where?: CardSubscriptionWhereInput
  ) => CardSubscriptionPayloadSubscription;
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
  companyContact: (
    where?: CompanyContactSubscriptionWhereInput
  ) => CompanyContactSubscriptionPayloadSubscription;
  googleMapsLocation: (
    where?: GoogleMapsLocationSubscriptionWhereInput
  ) => GoogleMapsLocationSubscriptionPayloadSubscription;
  jobApplication: (
    where?: JobApplicationSubscriptionWhereInput
  ) => JobApplicationSubscriptionPayloadSubscription;
  jobApplicationContact: (
    where?: JobApplicationContactSubscriptionWhereInput
  ) => JobApplicationContactSubscriptionPayloadSubscription;
  jobApplicationResume: (
    where?: JobApplicationResumeSubscriptionWhereInput
  ) => JobApplicationResumeSubscriptionPayloadSubscription;
  resume: (
    where?: ResumeSubscriptionWhereInput
  ) => ResumeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AwsFileDataOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "ETag_ASC"
  | "ETag_DESC"
  | "Key_ASC"
  | "Key_DESC"
  | "Location_ASC"
  | "Location_DESC"
  | "s3Url_ASC"
  | "s3Url_DESC"
  | "cloudfrontUrl_ASC"
  | "cloudfrontUrl_DESC"
  | "Bucket_ASC"
  | "Bucket_DESC"
  | "VersionId_ASC"
  | "VersionId_DESC"
  | "fileName_ASC"
  | "fileName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type BillingFrequency = "MONTHLY" | "YEARLY";

export type JobDecision = "REJECTED" | "ACCEPTED" | "DECLINED";

export type ApplicationStatus =
  | "INTERESTED"
  | "APPLIED"
  | "INTERVIEWING"
  | "OFFER"
  | "DECIDED";

export type JobApplicationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "companyName_ASC"
  | "companyName_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "position_ASC"
  | "position_DESC"
  | "locationName_ASC"
  | "locationName_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "isRemote_ASC"
  | "isRemote_DESC"
  | "jobListingLink_ASC"
  | "jobListingLink_DESC"
  | "jobListingNotes_ASC"
  | "jobListingNotes_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "isApplicationActive_ASC"
  | "isApplicationActive_DESC"
  | "dateApplied_ASC"
  | "dateApplied_DESC"
  | "dateOffered_ASC"
  | "dateOffered_DESC"
  | "dateDecided_ASC"
  | "dateDecided_DESC"
  | "jobDecision_ASC"
  | "jobDecision_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "applicationStatus_ASC"
  | "applicationStatus_DESC";

export type CompanyContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "position_ASC"
  | "position_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "order_ASC"
  | "order_DESC";

export type JobApplicationContactOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "position_ASC"
  | "position_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "order_ASC"
  | "order_DESC";

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "website_ASC"
  | "website_DESC"
  | "rating_ASC"
  | "rating_DESC"
  | "notes_ASC"
  | "notes_DESC"
  | "jobApplicationsCount_ASC"
  | "jobApplicationsCount_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ResumeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type BillingInfoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "stripeCustomerId_ASC"
  | "stripeCustomerId_DESC"
  | "stripeSubscriptionId_ASC"
  | "stripeSubscriptionId_DESC"
  | "billingFrequency_ASC"
  | "billingFrequency_DESC"
  | "startOfBillingPeriod_ASC"
  | "startOfBillingPeriod_DESC"
  | "endOfBillingPeriod_ASC"
  | "endOfBillingPeriod_DESC"
  | "willCancelAtEndOfPeriod_ASC"
  | "willCancelAtEndOfPeriod_DESC"
  | "isPremiumActive_ASC"
  | "isPremiumActive_DESC";

export type CardOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "last4Digits_ASC"
  | "last4Digits_DESC"
  | "expMonth_ASC"
  | "expMonth_DESC"
  | "expYear_ASC"
  | "expYear_DESC"
  | "brand_ASC"
  | "brand_DESC"
  | "stripePaymentMethodId_ASC"
  | "stripePaymentMethodId_DESC";

export type GoogleMapsLocationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "googlePlacesId_ASC"
  | "googlePlacesId_DESC";

export type JobApplicationResumeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "selectedVersionId_ASC"
  | "selectedVersionId_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "emailConfirmationToken_ASC"
  | "emailConfirmationToken_DESC"
  | "hasVerifiedEmail_ASC"
  | "hasVerifiedEmail_DESC"
  | "hasCompletedOnboarding_ASC"
  | "hasCompletedOnboarding_DESC"
  | "googleId_ASC"
  | "googleId_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AwsFileDataWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AwsFileDataWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ETag?: Maybe<String>;
  ETag_not?: Maybe<String>;
  ETag_in?: Maybe<String[] | String>;
  ETag_not_in?: Maybe<String[] | String>;
  ETag_lt?: Maybe<String>;
  ETag_lte?: Maybe<String>;
  ETag_gt?: Maybe<String>;
  ETag_gte?: Maybe<String>;
  ETag_contains?: Maybe<String>;
  ETag_not_contains?: Maybe<String>;
  ETag_starts_with?: Maybe<String>;
  ETag_not_starts_with?: Maybe<String>;
  ETag_ends_with?: Maybe<String>;
  ETag_not_ends_with?: Maybe<String>;
  Key?: Maybe<String>;
  Key_not?: Maybe<String>;
  Key_in?: Maybe<String[] | String>;
  Key_not_in?: Maybe<String[] | String>;
  Key_lt?: Maybe<String>;
  Key_lte?: Maybe<String>;
  Key_gt?: Maybe<String>;
  Key_gte?: Maybe<String>;
  Key_contains?: Maybe<String>;
  Key_not_contains?: Maybe<String>;
  Key_starts_with?: Maybe<String>;
  Key_not_starts_with?: Maybe<String>;
  Key_ends_with?: Maybe<String>;
  Key_not_ends_with?: Maybe<String>;
  Location?: Maybe<String>;
  Location_not?: Maybe<String>;
  Location_in?: Maybe<String[] | String>;
  Location_not_in?: Maybe<String[] | String>;
  Location_lt?: Maybe<String>;
  Location_lte?: Maybe<String>;
  Location_gt?: Maybe<String>;
  Location_gte?: Maybe<String>;
  Location_contains?: Maybe<String>;
  Location_not_contains?: Maybe<String>;
  Location_starts_with?: Maybe<String>;
  Location_not_starts_with?: Maybe<String>;
  Location_ends_with?: Maybe<String>;
  Location_not_ends_with?: Maybe<String>;
  s3Url?: Maybe<String>;
  s3Url_not?: Maybe<String>;
  s3Url_in?: Maybe<String[] | String>;
  s3Url_not_in?: Maybe<String[] | String>;
  s3Url_lt?: Maybe<String>;
  s3Url_lte?: Maybe<String>;
  s3Url_gt?: Maybe<String>;
  s3Url_gte?: Maybe<String>;
  s3Url_contains?: Maybe<String>;
  s3Url_not_contains?: Maybe<String>;
  s3Url_starts_with?: Maybe<String>;
  s3Url_not_starts_with?: Maybe<String>;
  s3Url_ends_with?: Maybe<String>;
  s3Url_not_ends_with?: Maybe<String>;
  cloudfrontUrl?: Maybe<String>;
  cloudfrontUrl_not?: Maybe<String>;
  cloudfrontUrl_in?: Maybe<String[] | String>;
  cloudfrontUrl_not_in?: Maybe<String[] | String>;
  cloudfrontUrl_lt?: Maybe<String>;
  cloudfrontUrl_lte?: Maybe<String>;
  cloudfrontUrl_gt?: Maybe<String>;
  cloudfrontUrl_gte?: Maybe<String>;
  cloudfrontUrl_contains?: Maybe<String>;
  cloudfrontUrl_not_contains?: Maybe<String>;
  cloudfrontUrl_starts_with?: Maybe<String>;
  cloudfrontUrl_not_starts_with?: Maybe<String>;
  cloudfrontUrl_ends_with?: Maybe<String>;
  cloudfrontUrl_not_ends_with?: Maybe<String>;
  Bucket?: Maybe<String>;
  Bucket_not?: Maybe<String>;
  Bucket_in?: Maybe<String[] | String>;
  Bucket_not_in?: Maybe<String[] | String>;
  Bucket_lt?: Maybe<String>;
  Bucket_lte?: Maybe<String>;
  Bucket_gt?: Maybe<String>;
  Bucket_gte?: Maybe<String>;
  Bucket_contains?: Maybe<String>;
  Bucket_not_contains?: Maybe<String>;
  Bucket_starts_with?: Maybe<String>;
  Bucket_not_starts_with?: Maybe<String>;
  Bucket_ends_with?: Maybe<String>;
  Bucket_not_ends_with?: Maybe<String>;
  VersionId?: Maybe<String>;
  VersionId_not?: Maybe<String>;
  VersionId_in?: Maybe<String[] | String>;
  VersionId_not_in?: Maybe<String[] | String>;
  VersionId_lt?: Maybe<String>;
  VersionId_lte?: Maybe<String>;
  VersionId_gt?: Maybe<String>;
  VersionId_gte?: Maybe<String>;
  VersionId_contains?: Maybe<String>;
  VersionId_not_contains?: Maybe<String>;
  VersionId_starts_with?: Maybe<String>;
  VersionId_not_starts_with?: Maybe<String>;
  VersionId_ends_with?: Maybe<String>;
  VersionId_not_ends_with?: Maybe<String>;
  fileName?: Maybe<String>;
  fileName_not?: Maybe<String>;
  fileName_in?: Maybe<String[] | String>;
  fileName_not_in?: Maybe<String[] | String>;
  fileName_lt?: Maybe<String>;
  fileName_lte?: Maybe<String>;
  fileName_gt?: Maybe<String>;
  fileName_gte?: Maybe<String>;
  fileName_contains?: Maybe<String>;
  fileName_not_contains?: Maybe<String>;
  fileName_starts_with?: Maybe<String>;
  fileName_not_starts_with?: Maybe<String>;
  fileName_ends_with?: Maybe<String>;
  fileName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AwsFileDataWhereInput[] | AwsFileDataWhereInput>;
  OR?: Maybe<AwsFileDataWhereInput[] | AwsFileDataWhereInput>;
  NOT?: Maybe<AwsFileDataWhereInput[] | AwsFileDataWhereInput>;
}

export type BillingInfoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  stripeCustomerId?: Maybe<String>;
}>;

export interface JobApplicationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  company?: Maybe<CompanyWhereInput>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  location?: Maybe<GoogleMapsLocationWhereInput>;
  locationName?: Maybe<String>;
  locationName_not?: Maybe<String>;
  locationName_in?: Maybe<String[] | String>;
  locationName_not_in?: Maybe<String[] | String>;
  locationName_lt?: Maybe<String>;
  locationName_lte?: Maybe<String>;
  locationName_gt?: Maybe<String>;
  locationName_gte?: Maybe<String>;
  locationName_contains?: Maybe<String>;
  locationName_not_contains?: Maybe<String>;
  locationName_starts_with?: Maybe<String>;
  locationName_not_starts_with?: Maybe<String>;
  locationName_ends_with?: Maybe<String>;
  locationName_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  isRemote_not?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingLink_not?: Maybe<String>;
  jobListingLink_in?: Maybe<String[] | String>;
  jobListingLink_not_in?: Maybe<String[] | String>;
  jobListingLink_lt?: Maybe<String>;
  jobListingLink_lte?: Maybe<String>;
  jobListingLink_gt?: Maybe<String>;
  jobListingLink_gte?: Maybe<String>;
  jobListingLink_contains?: Maybe<String>;
  jobListingLink_not_contains?: Maybe<String>;
  jobListingLink_starts_with?: Maybe<String>;
  jobListingLink_not_starts_with?: Maybe<String>;
  jobListingLink_ends_with?: Maybe<String>;
  jobListingLink_not_ends_with?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  jobListingNotes_not?: Maybe<String>;
  jobListingNotes_in?: Maybe<String[] | String>;
  jobListingNotes_not_in?: Maybe<String[] | String>;
  jobListingNotes_lt?: Maybe<String>;
  jobListingNotes_lte?: Maybe<String>;
  jobListingNotes_gt?: Maybe<String>;
  jobListingNotes_gte?: Maybe<String>;
  jobListingNotes_contains?: Maybe<String>;
  jobListingNotes_not_contains?: Maybe<String>;
  jobListingNotes_starts_with?: Maybe<String>;
  jobListingNotes_not_starts_with?: Maybe<String>;
  jobListingNotes_ends_with?: Maybe<String>;
  jobListingNotes_not_ends_with?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeWhereInput>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  isApplicationActive_not?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateApplied_not?: Maybe<DateTimeInput>;
  dateApplied_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateApplied_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateApplied_lt?: Maybe<DateTimeInput>;
  dateApplied_lte?: Maybe<DateTimeInput>;
  dateApplied_gt?: Maybe<DateTimeInput>;
  dateApplied_gte?: Maybe<DateTimeInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateOffered_not?: Maybe<DateTimeInput>;
  dateOffered_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOffered_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOffered_lt?: Maybe<DateTimeInput>;
  dateOffered_lte?: Maybe<DateTimeInput>;
  dateOffered_gt?: Maybe<DateTimeInput>;
  dateOffered_gte?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  dateDecided_not?: Maybe<DateTimeInput>;
  dateDecided_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateDecided_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateDecided_lt?: Maybe<DateTimeInput>;
  dateDecided_lte?: Maybe<DateTimeInput>;
  dateDecided_gt?: Maybe<DateTimeInput>;
  dateDecided_gte?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  jobDecision_not?: Maybe<JobDecision>;
  jobDecision_in?: Maybe<JobDecision[] | JobDecision>;
  jobDecision_not_in?: Maybe<JobDecision[] | JobDecision>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  applicationStatus?: Maybe<ApplicationStatus>;
  applicationStatus_not?: Maybe<ApplicationStatus>;
  applicationStatus_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  applicationStatus_not_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataWhereInput>;
  contacts_every?: Maybe<JobApplicationContactWhereInput>;
  contacts_some?: Maybe<JobApplicationContactWhereInput>;
  contacts_none?: Maybe<JobApplicationContactWhereInput>;
  AND?: Maybe<JobApplicationWhereInput[] | JobApplicationWhereInput>;
  OR?: Maybe<JobApplicationWhereInput[] | JobApplicationWhereInput>;
  NOT?: Maybe<JobApplicationWhereInput[] | JobApplicationWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  resetTokenExpiry_not?: Maybe<Float>;
  resetTokenExpiry_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_not_in?: Maybe<Float[] | Float>;
  resetTokenExpiry_lt?: Maybe<Float>;
  resetTokenExpiry_lte?: Maybe<Float>;
  resetTokenExpiry_gt?: Maybe<Float>;
  resetTokenExpiry_gte?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  emailConfirmationToken_not?: Maybe<String>;
  emailConfirmationToken_in?: Maybe<String[] | String>;
  emailConfirmationToken_not_in?: Maybe<String[] | String>;
  emailConfirmationToken_lt?: Maybe<String>;
  emailConfirmationToken_lte?: Maybe<String>;
  emailConfirmationToken_gt?: Maybe<String>;
  emailConfirmationToken_gte?: Maybe<String>;
  emailConfirmationToken_contains?: Maybe<String>;
  emailConfirmationToken_not_contains?: Maybe<String>;
  emailConfirmationToken_starts_with?: Maybe<String>;
  emailConfirmationToken_not_starts_with?: Maybe<String>;
  emailConfirmationToken_ends_with?: Maybe<String>;
  emailConfirmationToken_not_ends_with?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasVerifiedEmail_not?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  hasCompletedOnboarding_not?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  googleId_not?: Maybe<String>;
  googleId_in?: Maybe<String[] | String>;
  googleId_not_in?: Maybe<String[] | String>;
  googleId_lt?: Maybe<String>;
  googleId_lte?: Maybe<String>;
  googleId_gt?: Maybe<String>;
  googleId_gte?: Maybe<String>;
  googleId_contains?: Maybe<String>;
  googleId_not_contains?: Maybe<String>;
  googleId_starts_with?: Maybe<String>;
  googleId_not_starts_with?: Maybe<String>;
  googleId_ends_with?: Maybe<String>;
  googleId_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  billing?: Maybe<BillingInfoWhereInput>;
  jobApplications_every?: Maybe<JobApplicationWhereInput>;
  jobApplications_some?: Maybe<JobApplicationWhereInput>;
  jobApplications_none?: Maybe<JobApplicationWhereInput>;
  companies_every?: Maybe<CompanyWhereInput>;
  companies_some?: Maybe<CompanyWhereInput>;
  companies_none?: Maybe<CompanyWhereInput>;
  resumes_every?: Maybe<ResumeWhereInput>;
  resumes_some?: Maybe<ResumeWhereInput>;
  resumes_none?: Maybe<ResumeWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface BillingInfoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  stripeCustomerId?: Maybe<String>;
  stripeCustomerId_not?: Maybe<String>;
  stripeCustomerId_in?: Maybe<String[] | String>;
  stripeCustomerId_not_in?: Maybe<String[] | String>;
  stripeCustomerId_lt?: Maybe<String>;
  stripeCustomerId_lte?: Maybe<String>;
  stripeCustomerId_gt?: Maybe<String>;
  stripeCustomerId_gte?: Maybe<String>;
  stripeCustomerId_contains?: Maybe<String>;
  stripeCustomerId_not_contains?: Maybe<String>;
  stripeCustomerId_starts_with?: Maybe<String>;
  stripeCustomerId_not_starts_with?: Maybe<String>;
  stripeCustomerId_ends_with?: Maybe<String>;
  stripeCustomerId_not_ends_with?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  stripeSubscriptionId_not?: Maybe<String>;
  stripeSubscriptionId_in?: Maybe<String[] | String>;
  stripeSubscriptionId_not_in?: Maybe<String[] | String>;
  stripeSubscriptionId_lt?: Maybe<String>;
  stripeSubscriptionId_lte?: Maybe<String>;
  stripeSubscriptionId_gt?: Maybe<String>;
  stripeSubscriptionId_gte?: Maybe<String>;
  stripeSubscriptionId_contains?: Maybe<String>;
  stripeSubscriptionId_not_contains?: Maybe<String>;
  stripeSubscriptionId_starts_with?: Maybe<String>;
  stripeSubscriptionId_not_starts_with?: Maybe<String>;
  stripeSubscriptionId_ends_with?: Maybe<String>;
  stripeSubscriptionId_not_ends_with?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  billingFrequency_not?: Maybe<BillingFrequency>;
  billingFrequency_in?: Maybe<BillingFrequency[] | BillingFrequency>;
  billingFrequency_not_in?: Maybe<BillingFrequency[] | BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  startOfBillingPeriod_not?: Maybe<Int>;
  startOfBillingPeriod_in?: Maybe<Int[] | Int>;
  startOfBillingPeriod_not_in?: Maybe<Int[] | Int>;
  startOfBillingPeriod_lt?: Maybe<Int>;
  startOfBillingPeriod_lte?: Maybe<Int>;
  startOfBillingPeriod_gt?: Maybe<Int>;
  startOfBillingPeriod_gte?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod_not?: Maybe<Int>;
  endOfBillingPeriod_in?: Maybe<Int[] | Int>;
  endOfBillingPeriod_not_in?: Maybe<Int[] | Int>;
  endOfBillingPeriod_lt?: Maybe<Int>;
  endOfBillingPeriod_lte?: Maybe<Int>;
  endOfBillingPeriod_gt?: Maybe<Int>;
  endOfBillingPeriod_gte?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  willCancelAtEndOfPeriod_not?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
  isPremiumActive_not?: Maybe<Boolean>;
  card?: Maybe<CardWhereInput>;
  AND?: Maybe<BillingInfoWhereInput[] | BillingInfoWhereInput>;
  OR?: Maybe<BillingInfoWhereInput[] | BillingInfoWhereInput>;
  NOT?: Maybe<BillingInfoWhereInput[] | BillingInfoWhereInput>;
}

export interface CardWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  billingInfo?: Maybe<BillingInfoWhereInput>;
  last4Digits?: Maybe<String>;
  last4Digits_not?: Maybe<String>;
  last4Digits_in?: Maybe<String[] | String>;
  last4Digits_not_in?: Maybe<String[] | String>;
  last4Digits_lt?: Maybe<String>;
  last4Digits_lte?: Maybe<String>;
  last4Digits_gt?: Maybe<String>;
  last4Digits_gte?: Maybe<String>;
  last4Digits_contains?: Maybe<String>;
  last4Digits_not_contains?: Maybe<String>;
  last4Digits_starts_with?: Maybe<String>;
  last4Digits_not_starts_with?: Maybe<String>;
  last4Digits_ends_with?: Maybe<String>;
  last4Digits_not_ends_with?: Maybe<String>;
  expMonth?: Maybe<Int>;
  expMonth_not?: Maybe<Int>;
  expMonth_in?: Maybe<Int[] | Int>;
  expMonth_not_in?: Maybe<Int[] | Int>;
  expMonth_lt?: Maybe<Int>;
  expMonth_lte?: Maybe<Int>;
  expMonth_gt?: Maybe<Int>;
  expMonth_gte?: Maybe<Int>;
  expYear?: Maybe<Int>;
  expYear_not?: Maybe<Int>;
  expYear_in?: Maybe<Int[] | Int>;
  expYear_not_in?: Maybe<Int[] | Int>;
  expYear_lt?: Maybe<Int>;
  expYear_lte?: Maybe<Int>;
  expYear_gt?: Maybe<Int>;
  expYear_gte?: Maybe<Int>;
  brand?: Maybe<String>;
  brand_not?: Maybe<String>;
  brand_in?: Maybe<String[] | String>;
  brand_not_in?: Maybe<String[] | String>;
  brand_lt?: Maybe<String>;
  brand_lte?: Maybe<String>;
  brand_gt?: Maybe<String>;
  brand_gte?: Maybe<String>;
  brand_contains?: Maybe<String>;
  brand_not_contains?: Maybe<String>;
  brand_starts_with?: Maybe<String>;
  brand_not_starts_with?: Maybe<String>;
  brand_ends_with?: Maybe<String>;
  brand_not_ends_with?: Maybe<String>;
  stripePaymentMethodId?: Maybe<String>;
  stripePaymentMethodId_not?: Maybe<String>;
  stripePaymentMethodId_in?: Maybe<String[] | String>;
  stripePaymentMethodId_not_in?: Maybe<String[] | String>;
  stripePaymentMethodId_lt?: Maybe<String>;
  stripePaymentMethodId_lte?: Maybe<String>;
  stripePaymentMethodId_gt?: Maybe<String>;
  stripePaymentMethodId_gte?: Maybe<String>;
  stripePaymentMethodId_contains?: Maybe<String>;
  stripePaymentMethodId_not_contains?: Maybe<String>;
  stripePaymentMethodId_starts_with?: Maybe<String>;
  stripePaymentMethodId_not_starts_with?: Maybe<String>;
  stripePaymentMethodId_ends_with?: Maybe<String>;
  stripePaymentMethodId_not_ends_with?: Maybe<String>;
  AND?: Maybe<CardWhereInput[] | CardWhereInput>;
  OR?: Maybe<CardWhereInput[] | CardWhereInput>;
  NOT?: Maybe<CardWhereInput[] | CardWhereInput>;
}

export interface CompanyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  jobApplicationsCount_not?: Maybe<Int>;
  jobApplicationsCount_in?: Maybe<Int[] | Int>;
  jobApplicationsCount_not_in?: Maybe<Int[] | Int>;
  jobApplicationsCount_lt?: Maybe<Int>;
  jobApplicationsCount_lte?: Maybe<Int>;
  jobApplicationsCount_gt?: Maybe<Int>;
  jobApplicationsCount_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  image?: Maybe<AwsFileDataWhereInput>;
  contacts_every?: Maybe<CompanyContactWhereInput>;
  contacts_some?: Maybe<CompanyContactWhereInput>;
  contacts_none?: Maybe<CompanyContactWhereInput>;
  jobApplications_every?: Maybe<JobApplicationWhereInput>;
  jobApplications_some?: Maybe<JobApplicationWhereInput>;
  jobApplications_none?: Maybe<JobApplicationWhereInput>;
  AND?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  OR?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  NOT?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
}

export interface CompanyContactWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  company?: Maybe<CompanyWhereInput>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<CompanyContactWhereInput[] | CompanyContactWhereInput>;
  OR?: Maybe<CompanyContactWhereInput[] | CompanyContactWhereInput>;
  NOT?: Maybe<CompanyContactWhereInput[] | CompanyContactWhereInput>;
}

export interface ResumeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  versions_every?: Maybe<AwsFileDataWhereInput>;
  versions_some?: Maybe<AwsFileDataWhereInput>;
  versions_none?: Maybe<AwsFileDataWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ResumeWhereInput[] | ResumeWhereInput>;
  OR?: Maybe<ResumeWhereInput[] | ResumeWhereInput>;
  NOT?: Maybe<ResumeWhereInput[] | ResumeWhereInput>;
}

export interface GoogleMapsLocationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  googlePlacesId?: Maybe<String>;
  googlePlacesId_not?: Maybe<String>;
  googlePlacesId_in?: Maybe<String[] | String>;
  googlePlacesId_not_in?: Maybe<String[] | String>;
  googlePlacesId_lt?: Maybe<String>;
  googlePlacesId_lte?: Maybe<String>;
  googlePlacesId_gt?: Maybe<String>;
  googlePlacesId_gte?: Maybe<String>;
  googlePlacesId_contains?: Maybe<String>;
  googlePlacesId_not_contains?: Maybe<String>;
  googlePlacesId_starts_with?: Maybe<String>;
  googlePlacesId_not_starts_with?: Maybe<String>;
  googlePlacesId_ends_with?: Maybe<String>;
  googlePlacesId_not_ends_with?: Maybe<String>;
  AND?: Maybe<GoogleMapsLocationWhereInput[] | GoogleMapsLocationWhereInput>;
  OR?: Maybe<GoogleMapsLocationWhereInput[] | GoogleMapsLocationWhereInput>;
  NOT?: Maybe<GoogleMapsLocationWhereInput[] | GoogleMapsLocationWhereInput>;
}

export interface JobApplicationResumeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  resume?: Maybe<ResumeWhereInput>;
  selectedVersionId?: Maybe<String>;
  selectedVersionId_not?: Maybe<String>;
  selectedVersionId_in?: Maybe<String[] | String>;
  selectedVersionId_not_in?: Maybe<String[] | String>;
  selectedVersionId_lt?: Maybe<String>;
  selectedVersionId_lte?: Maybe<String>;
  selectedVersionId_gt?: Maybe<String>;
  selectedVersionId_gte?: Maybe<String>;
  selectedVersionId_contains?: Maybe<String>;
  selectedVersionId_not_contains?: Maybe<String>;
  selectedVersionId_starts_with?: Maybe<String>;
  selectedVersionId_not_starts_with?: Maybe<String>;
  selectedVersionId_ends_with?: Maybe<String>;
  selectedVersionId_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    JobApplicationResumeWhereInput[] | JobApplicationResumeWhereInput
  >;
  OR?: Maybe<JobApplicationResumeWhereInput[] | JobApplicationResumeWhereInput>;
  NOT?: Maybe<
    JobApplicationResumeWhereInput[] | JobApplicationResumeWhereInput
  >;
}

export interface JobApplicationContactWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  jobApplication?: Maybe<JobApplicationWhereInput>;
  AND?: Maybe<
    JobApplicationContactWhereInput[] | JobApplicationContactWhereInput
  >;
  OR?: Maybe<
    JobApplicationContactWhereInput[] | JobApplicationContactWhereInput
  >;
  NOT?: Maybe<
    JobApplicationContactWhereInput[] | JobApplicationContactWhereInput
  >;
}

export type CardWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type CompanyContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type GoogleMapsLocationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type JobApplicationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type JobApplicationContactWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type JobApplicationResumeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type ResumeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
}>;

export interface AwsFileDataCreateInput {
  id?: Maybe<ID_Input>;
  ETag: String;
  Key: String;
  Location: String;
  s3Url: String;
  cloudfrontUrl: String;
  Bucket: String;
  VersionId: String;
  fileName: String;
}

export interface AwsFileDataUpdateInput {
  ETag?: Maybe<String>;
  Key?: Maybe<String>;
  Location?: Maybe<String>;
  s3Url?: Maybe<String>;
  cloudfrontUrl?: Maybe<String>;
  Bucket?: Maybe<String>;
  VersionId?: Maybe<String>;
  fileName?: Maybe<String>;
}

export interface AwsFileDataUpdateManyMutationInput {
  ETag?: Maybe<String>;
  Key?: Maybe<String>;
  Location?: Maybe<String>;
  s3Url?: Maybe<String>;
  cloudfrontUrl?: Maybe<String>;
  Bucket?: Maybe<String>;
  VersionId?: Maybe<String>;
  fileName?: Maybe<String>;
}

export interface BillingInfoCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutBillingInput;
  stripeCustomerId?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
  card?: Maybe<CardCreateOneWithoutBillingInfoInput>;
}

export interface UserCreateOneWithoutBillingInput {
  create?: Maybe<UserCreateWithoutBillingInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutBillingInput {
  id?: Maybe<ID_Input>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  jobApplications?: Maybe<JobApplicationCreateManyWithoutUserInput>;
  companies?: Maybe<CompanyCreateManyWithoutUserInput>;
  resumes?: Maybe<ResumeCreateManyWithoutUserInput>;
}

export interface JobApplicationCreateManyWithoutUserInput {
  create?: Maybe<
    | JobApplicationCreateWithoutUserInput[]
    | JobApplicationCreateWithoutUserInput
  >;
  connect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
}

export interface JobApplicationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  company: CompanyCreateOneWithoutJobApplicationsInput;
  companyName: String;
  position: String;
  location?: Maybe<GoogleMapsLocationCreateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeCreateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationCreatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataCreateOneInput>;
  contacts?: Maybe<JobApplicationContactCreateManyWithoutJobApplicationInput>;
}

export interface CompanyCreateOneWithoutJobApplicationsInput {
  create?: Maybe<CompanyCreateWithoutJobApplicationsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyCreateWithoutJobApplicationsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCompaniesInput;
  name: String;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataCreateOneInput>;
  contacts?: Maybe<CompanyContactCreateManyWithoutCompanyInput>;
}

export interface UserCreateOneWithoutCompaniesInput {
  create?: Maybe<UserCreateWithoutCompaniesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCompaniesInput {
  id?: Maybe<ID_Input>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoCreateOneWithoutUserInput>;
  jobApplications?: Maybe<JobApplicationCreateManyWithoutUserInput>;
  resumes?: Maybe<ResumeCreateManyWithoutUserInput>;
}

export interface BillingInfoCreateOneWithoutUserInput {
  create?: Maybe<BillingInfoCreateWithoutUserInput>;
  connect?: Maybe<BillingInfoWhereUniqueInput>;
}

export interface BillingInfoCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  stripeCustomerId?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
  card?: Maybe<CardCreateOneWithoutBillingInfoInput>;
}

export interface CardCreateOneWithoutBillingInfoInput {
  create?: Maybe<CardCreateWithoutBillingInfoInput>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface CardCreateWithoutBillingInfoInput {
  id?: Maybe<ID_Input>;
  last4Digits: String;
  expMonth: Int;
  expYear: Int;
  brand: String;
  stripePaymentMethodId: String;
}

export interface ResumeCreateManyWithoutUserInput {
  create?: Maybe<ResumeCreateWithoutUserInput[] | ResumeCreateWithoutUserInput>;
  connect?: Maybe<ResumeWhereUniqueInput[] | ResumeWhereUniqueInput>;
}

export interface ResumeCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  versions?: Maybe<AwsFileDataCreateManyInput>;
}

export interface AwsFileDataCreateManyInput {
  create?: Maybe<AwsFileDataCreateInput[] | AwsFileDataCreateInput>;
  connect?: Maybe<AwsFileDataWhereUniqueInput[] | AwsFileDataWhereUniqueInput>;
}

export interface AwsFileDataCreateOneInput {
  create?: Maybe<AwsFileDataCreateInput>;
  connect?: Maybe<AwsFileDataWhereUniqueInput>;
}

export interface CompanyContactCreateManyWithoutCompanyInput {
  create?: Maybe<
    | CompanyContactCreateWithoutCompanyInput[]
    | CompanyContactCreateWithoutCompanyInput
  >;
  connect?: Maybe<
    CompanyContactWhereUniqueInput[] | CompanyContactWhereUniqueInput
  >;
}

export interface CompanyContactCreateWithoutCompanyInput {
  id?: Maybe<ID_Input>;
  name: String;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order: Int;
}

export interface GoogleMapsLocationCreateOneInput {
  create?: Maybe<GoogleMapsLocationCreateInput>;
  connect?: Maybe<GoogleMapsLocationWhereUniqueInput>;
}

export interface GoogleMapsLocationCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  googlePlacesId: String;
}

export interface JobApplicationResumeCreateOneInput {
  create?: Maybe<JobApplicationResumeCreateInput>;
  connect?: Maybe<JobApplicationResumeWhereUniqueInput>;
}

export interface JobApplicationResumeCreateInput {
  id?: Maybe<ID_Input>;
  resume?: Maybe<ResumeCreateOneInput>;
  selectedVersionId: String;
}

export interface ResumeCreateOneInput {
  create?: Maybe<ResumeCreateInput>;
  connect?: Maybe<ResumeWhereUniqueInput>;
}

export interface ResumeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  user: UserCreateOneWithoutResumesInput;
  versions?: Maybe<AwsFileDataCreateManyInput>;
}

export interface UserCreateOneWithoutResumesInput {
  create?: Maybe<UserCreateWithoutResumesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutResumesInput {
  id?: Maybe<ID_Input>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoCreateOneWithoutUserInput>;
  jobApplications?: Maybe<JobApplicationCreateManyWithoutUserInput>;
  companies?: Maybe<CompanyCreateManyWithoutUserInput>;
}

export interface CompanyCreateManyWithoutUserInput {
  create?: Maybe<
    CompanyCreateWithoutUserInput[] | CompanyCreateWithoutUserInput
  >;
  connect?: Maybe<CompanyWhereUniqueInput[] | CompanyWhereUniqueInput>;
}

export interface CompanyCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataCreateOneInput>;
  contacts?: Maybe<CompanyContactCreateManyWithoutCompanyInput>;
  jobApplications?: Maybe<JobApplicationCreateManyWithoutCompanyInput>;
}

export interface JobApplicationCreateManyWithoutCompanyInput {
  create?: Maybe<
    | JobApplicationCreateWithoutCompanyInput[]
    | JobApplicationCreateWithoutCompanyInput
  >;
  connect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
}

export interface JobApplicationCreateWithoutCompanyInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutJobApplicationsInput;
  companyName: String;
  position: String;
  location?: Maybe<GoogleMapsLocationCreateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeCreateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationCreatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataCreateOneInput>;
  contacts?: Maybe<JobApplicationContactCreateManyWithoutJobApplicationInput>;
}

export interface UserCreateOneWithoutJobApplicationsInput {
  create?: Maybe<UserCreateWithoutJobApplicationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutJobApplicationsInput {
  id?: Maybe<ID_Input>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoCreateOneWithoutUserInput>;
  companies?: Maybe<CompanyCreateManyWithoutUserInput>;
  resumes?: Maybe<ResumeCreateManyWithoutUserInput>;
}

export interface JobApplicationCreatedateInterviewingInput {
  set?: Maybe<DateTimeInput[] | DateTimeInput>;
}

export interface JobApplicationContactCreateManyWithoutJobApplicationInput {
  create?: Maybe<
    | JobApplicationContactCreateWithoutJobApplicationInput[]
    | JobApplicationContactCreateWithoutJobApplicationInput
  >;
  connect?: Maybe<
    | JobApplicationContactWhereUniqueInput[]
    | JobApplicationContactWhereUniqueInput
  >;
}

export interface JobApplicationContactCreateWithoutJobApplicationInput {
  id?: Maybe<ID_Input>;
  name: String;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order: Int;
}

export interface BillingInfoUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBillingInput>;
  stripeCustomerId?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
  card?: Maybe<CardUpdateOneWithoutBillingInfoInput>;
}

export interface UserUpdateOneRequiredWithoutBillingInput {
  create?: Maybe<UserCreateWithoutBillingInput>;
  update?: Maybe<UserUpdateWithoutBillingDataInput>;
  upsert?: Maybe<UserUpsertWithoutBillingInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutBillingDataInput {
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  jobApplications?: Maybe<JobApplicationUpdateManyWithoutUserInput>;
  companies?: Maybe<CompanyUpdateManyWithoutUserInput>;
  resumes?: Maybe<ResumeUpdateManyWithoutUserInput>;
}

export interface JobApplicationUpdateManyWithoutUserInput {
  create?: Maybe<
    | JobApplicationCreateWithoutUserInput[]
    | JobApplicationCreateWithoutUserInput
  >;
  delete?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  connect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  set?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  disconnect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  update?: Maybe<
    | JobApplicationUpdateWithWhereUniqueWithoutUserInput[]
    | JobApplicationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | JobApplicationUpsertWithWhereUniqueWithoutUserInput[]
    | JobApplicationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput
  >;
  updateMany?: Maybe<
    | JobApplicationUpdateManyWithWhereNestedInput[]
    | JobApplicationUpdateManyWithWhereNestedInput
  >;
}

export interface JobApplicationUpdateWithWhereUniqueWithoutUserInput {
  where: JobApplicationWhereUniqueInput;
  data: JobApplicationUpdateWithoutUserDataInput;
}

export interface JobApplicationUpdateWithoutUserDataInput {
  company?: Maybe<CompanyUpdateOneRequiredWithoutJobApplicationsInput>;
  companyName?: Maybe<String>;
  position?: Maybe<String>;
  location?: Maybe<GoogleMapsLocationUpdateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeUpdateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationUpdatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataUpdateOneInput>;
  contacts?: Maybe<JobApplicationContactUpdateManyWithoutJobApplicationInput>;
}

export interface CompanyUpdateOneRequiredWithoutJobApplicationsInput {
  create?: Maybe<CompanyCreateWithoutJobApplicationsInput>;
  update?: Maybe<CompanyUpdateWithoutJobApplicationsDataInput>;
  upsert?: Maybe<CompanyUpsertWithoutJobApplicationsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyUpdateWithoutJobApplicationsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCompaniesInput>;
  name?: Maybe<String>;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataUpdateOneInput>;
  contacts?: Maybe<CompanyContactUpdateManyWithoutCompanyInput>;
}

export interface UserUpdateOneRequiredWithoutCompaniesInput {
  create?: Maybe<UserCreateWithoutCompaniesInput>;
  update?: Maybe<UserUpdateWithoutCompaniesDataInput>;
  upsert?: Maybe<UserUpsertWithoutCompaniesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutCompaniesDataInput {
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoUpdateOneWithoutUserInput>;
  jobApplications?: Maybe<JobApplicationUpdateManyWithoutUserInput>;
  resumes?: Maybe<ResumeUpdateManyWithoutUserInput>;
}

export interface BillingInfoUpdateOneWithoutUserInput {
  create?: Maybe<BillingInfoCreateWithoutUserInput>;
  update?: Maybe<BillingInfoUpdateWithoutUserDataInput>;
  upsert?: Maybe<BillingInfoUpsertWithoutUserInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<BillingInfoWhereUniqueInput>;
}

export interface BillingInfoUpdateWithoutUserDataInput {
  stripeCustomerId?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
  card?: Maybe<CardUpdateOneWithoutBillingInfoInput>;
}

export interface CardUpdateOneWithoutBillingInfoInput {
  create?: Maybe<CardCreateWithoutBillingInfoInput>;
  update?: Maybe<CardUpdateWithoutBillingInfoDataInput>;
  upsert?: Maybe<CardUpsertWithoutBillingInfoInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CardWhereUniqueInput>;
}

export interface CardUpdateWithoutBillingInfoDataInput {
  last4Digits?: Maybe<String>;
  expMonth?: Maybe<Int>;
  expYear?: Maybe<Int>;
  brand?: Maybe<String>;
  stripePaymentMethodId?: Maybe<String>;
}

export interface CardUpsertWithoutBillingInfoInput {
  update: CardUpdateWithoutBillingInfoDataInput;
  create: CardCreateWithoutBillingInfoInput;
}

export interface BillingInfoUpsertWithoutUserInput {
  update: BillingInfoUpdateWithoutUserDataInput;
  create: BillingInfoCreateWithoutUserInput;
}

export interface ResumeUpdateManyWithoutUserInput {
  create?: Maybe<ResumeCreateWithoutUserInput[] | ResumeCreateWithoutUserInput>;
  delete?: Maybe<ResumeWhereUniqueInput[] | ResumeWhereUniqueInput>;
  connect?: Maybe<ResumeWhereUniqueInput[] | ResumeWhereUniqueInput>;
  set?: Maybe<ResumeWhereUniqueInput[] | ResumeWhereUniqueInput>;
  disconnect?: Maybe<ResumeWhereUniqueInput[] | ResumeWhereUniqueInput>;
  update?: Maybe<
    | ResumeUpdateWithWhereUniqueWithoutUserInput[]
    | ResumeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | ResumeUpsertWithWhereUniqueWithoutUserInput[]
    | ResumeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<ResumeScalarWhereInput[] | ResumeScalarWhereInput>;
  updateMany?: Maybe<
    | ResumeUpdateManyWithWhereNestedInput[]
    | ResumeUpdateManyWithWhereNestedInput
  >;
}

export interface ResumeUpdateWithWhereUniqueWithoutUserInput {
  where: ResumeWhereUniqueInput;
  data: ResumeUpdateWithoutUserDataInput;
}

export interface ResumeUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  versions?: Maybe<AwsFileDataUpdateManyInput>;
}

export interface AwsFileDataUpdateManyInput {
  create?: Maybe<AwsFileDataCreateInput[] | AwsFileDataCreateInput>;
  update?: Maybe<
    | AwsFileDataUpdateWithWhereUniqueNestedInput[]
    | AwsFileDataUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AwsFileDataUpsertWithWhereUniqueNestedInput[]
    | AwsFileDataUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AwsFileDataWhereUniqueInput[] | AwsFileDataWhereUniqueInput>;
  connect?: Maybe<AwsFileDataWhereUniqueInput[] | AwsFileDataWhereUniqueInput>;
  set?: Maybe<AwsFileDataWhereUniqueInput[] | AwsFileDataWhereUniqueInput>;
  disconnect?: Maybe<
    AwsFileDataWhereUniqueInput[] | AwsFileDataWhereUniqueInput
  >;
  deleteMany?: Maybe<
    AwsFileDataScalarWhereInput[] | AwsFileDataScalarWhereInput
  >;
  updateMany?: Maybe<
    | AwsFileDataUpdateManyWithWhereNestedInput[]
    | AwsFileDataUpdateManyWithWhereNestedInput
  >;
}

export interface AwsFileDataUpdateWithWhereUniqueNestedInput {
  where: AwsFileDataWhereUniqueInput;
  data: AwsFileDataUpdateDataInput;
}

export interface AwsFileDataUpdateDataInput {
  ETag?: Maybe<String>;
  Key?: Maybe<String>;
  Location?: Maybe<String>;
  s3Url?: Maybe<String>;
  cloudfrontUrl?: Maybe<String>;
  Bucket?: Maybe<String>;
  VersionId?: Maybe<String>;
  fileName?: Maybe<String>;
}

export interface AwsFileDataUpsertWithWhereUniqueNestedInput {
  where: AwsFileDataWhereUniqueInput;
  update: AwsFileDataUpdateDataInput;
  create: AwsFileDataCreateInput;
}

export interface AwsFileDataScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  ETag?: Maybe<String>;
  ETag_not?: Maybe<String>;
  ETag_in?: Maybe<String[] | String>;
  ETag_not_in?: Maybe<String[] | String>;
  ETag_lt?: Maybe<String>;
  ETag_lte?: Maybe<String>;
  ETag_gt?: Maybe<String>;
  ETag_gte?: Maybe<String>;
  ETag_contains?: Maybe<String>;
  ETag_not_contains?: Maybe<String>;
  ETag_starts_with?: Maybe<String>;
  ETag_not_starts_with?: Maybe<String>;
  ETag_ends_with?: Maybe<String>;
  ETag_not_ends_with?: Maybe<String>;
  Key?: Maybe<String>;
  Key_not?: Maybe<String>;
  Key_in?: Maybe<String[] | String>;
  Key_not_in?: Maybe<String[] | String>;
  Key_lt?: Maybe<String>;
  Key_lte?: Maybe<String>;
  Key_gt?: Maybe<String>;
  Key_gte?: Maybe<String>;
  Key_contains?: Maybe<String>;
  Key_not_contains?: Maybe<String>;
  Key_starts_with?: Maybe<String>;
  Key_not_starts_with?: Maybe<String>;
  Key_ends_with?: Maybe<String>;
  Key_not_ends_with?: Maybe<String>;
  Location?: Maybe<String>;
  Location_not?: Maybe<String>;
  Location_in?: Maybe<String[] | String>;
  Location_not_in?: Maybe<String[] | String>;
  Location_lt?: Maybe<String>;
  Location_lte?: Maybe<String>;
  Location_gt?: Maybe<String>;
  Location_gte?: Maybe<String>;
  Location_contains?: Maybe<String>;
  Location_not_contains?: Maybe<String>;
  Location_starts_with?: Maybe<String>;
  Location_not_starts_with?: Maybe<String>;
  Location_ends_with?: Maybe<String>;
  Location_not_ends_with?: Maybe<String>;
  s3Url?: Maybe<String>;
  s3Url_not?: Maybe<String>;
  s3Url_in?: Maybe<String[] | String>;
  s3Url_not_in?: Maybe<String[] | String>;
  s3Url_lt?: Maybe<String>;
  s3Url_lte?: Maybe<String>;
  s3Url_gt?: Maybe<String>;
  s3Url_gte?: Maybe<String>;
  s3Url_contains?: Maybe<String>;
  s3Url_not_contains?: Maybe<String>;
  s3Url_starts_with?: Maybe<String>;
  s3Url_not_starts_with?: Maybe<String>;
  s3Url_ends_with?: Maybe<String>;
  s3Url_not_ends_with?: Maybe<String>;
  cloudfrontUrl?: Maybe<String>;
  cloudfrontUrl_not?: Maybe<String>;
  cloudfrontUrl_in?: Maybe<String[] | String>;
  cloudfrontUrl_not_in?: Maybe<String[] | String>;
  cloudfrontUrl_lt?: Maybe<String>;
  cloudfrontUrl_lte?: Maybe<String>;
  cloudfrontUrl_gt?: Maybe<String>;
  cloudfrontUrl_gte?: Maybe<String>;
  cloudfrontUrl_contains?: Maybe<String>;
  cloudfrontUrl_not_contains?: Maybe<String>;
  cloudfrontUrl_starts_with?: Maybe<String>;
  cloudfrontUrl_not_starts_with?: Maybe<String>;
  cloudfrontUrl_ends_with?: Maybe<String>;
  cloudfrontUrl_not_ends_with?: Maybe<String>;
  Bucket?: Maybe<String>;
  Bucket_not?: Maybe<String>;
  Bucket_in?: Maybe<String[] | String>;
  Bucket_not_in?: Maybe<String[] | String>;
  Bucket_lt?: Maybe<String>;
  Bucket_lte?: Maybe<String>;
  Bucket_gt?: Maybe<String>;
  Bucket_gte?: Maybe<String>;
  Bucket_contains?: Maybe<String>;
  Bucket_not_contains?: Maybe<String>;
  Bucket_starts_with?: Maybe<String>;
  Bucket_not_starts_with?: Maybe<String>;
  Bucket_ends_with?: Maybe<String>;
  Bucket_not_ends_with?: Maybe<String>;
  VersionId?: Maybe<String>;
  VersionId_not?: Maybe<String>;
  VersionId_in?: Maybe<String[] | String>;
  VersionId_not_in?: Maybe<String[] | String>;
  VersionId_lt?: Maybe<String>;
  VersionId_lte?: Maybe<String>;
  VersionId_gt?: Maybe<String>;
  VersionId_gte?: Maybe<String>;
  VersionId_contains?: Maybe<String>;
  VersionId_not_contains?: Maybe<String>;
  VersionId_starts_with?: Maybe<String>;
  VersionId_not_starts_with?: Maybe<String>;
  VersionId_ends_with?: Maybe<String>;
  VersionId_not_ends_with?: Maybe<String>;
  fileName?: Maybe<String>;
  fileName_not?: Maybe<String>;
  fileName_in?: Maybe<String[] | String>;
  fileName_not_in?: Maybe<String[] | String>;
  fileName_lt?: Maybe<String>;
  fileName_lte?: Maybe<String>;
  fileName_gt?: Maybe<String>;
  fileName_gte?: Maybe<String>;
  fileName_contains?: Maybe<String>;
  fileName_not_contains?: Maybe<String>;
  fileName_starts_with?: Maybe<String>;
  fileName_not_starts_with?: Maybe<String>;
  fileName_ends_with?: Maybe<String>;
  fileName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AwsFileDataScalarWhereInput[] | AwsFileDataScalarWhereInput>;
  OR?: Maybe<AwsFileDataScalarWhereInput[] | AwsFileDataScalarWhereInput>;
  NOT?: Maybe<AwsFileDataScalarWhereInput[] | AwsFileDataScalarWhereInput>;
}

export interface AwsFileDataUpdateManyWithWhereNestedInput {
  where: AwsFileDataScalarWhereInput;
  data: AwsFileDataUpdateManyDataInput;
}

export interface AwsFileDataUpdateManyDataInput {
  ETag?: Maybe<String>;
  Key?: Maybe<String>;
  Location?: Maybe<String>;
  s3Url?: Maybe<String>;
  cloudfrontUrl?: Maybe<String>;
  Bucket?: Maybe<String>;
  VersionId?: Maybe<String>;
  fileName?: Maybe<String>;
}

export interface ResumeUpsertWithWhereUniqueWithoutUserInput {
  where: ResumeWhereUniqueInput;
  update: ResumeUpdateWithoutUserDataInput;
  create: ResumeCreateWithoutUserInput;
}

export interface ResumeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ResumeScalarWhereInput[] | ResumeScalarWhereInput>;
  OR?: Maybe<ResumeScalarWhereInput[] | ResumeScalarWhereInput>;
  NOT?: Maybe<ResumeScalarWhereInput[] | ResumeScalarWhereInput>;
}

export interface ResumeUpdateManyWithWhereNestedInput {
  where: ResumeScalarWhereInput;
  data: ResumeUpdateManyDataInput;
}

export interface ResumeUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface UserUpsertWithoutCompaniesInput {
  update: UserUpdateWithoutCompaniesDataInput;
  create: UserCreateWithoutCompaniesInput;
}

export interface AwsFileDataUpdateOneInput {
  create?: Maybe<AwsFileDataCreateInput>;
  update?: Maybe<AwsFileDataUpdateDataInput>;
  upsert?: Maybe<AwsFileDataUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<AwsFileDataWhereUniqueInput>;
}

export interface AwsFileDataUpsertNestedInput {
  update: AwsFileDataUpdateDataInput;
  create: AwsFileDataCreateInput;
}

export interface CompanyContactUpdateManyWithoutCompanyInput {
  create?: Maybe<
    | CompanyContactCreateWithoutCompanyInput[]
    | CompanyContactCreateWithoutCompanyInput
  >;
  delete?: Maybe<
    CompanyContactWhereUniqueInput[] | CompanyContactWhereUniqueInput
  >;
  connect?: Maybe<
    CompanyContactWhereUniqueInput[] | CompanyContactWhereUniqueInput
  >;
  set?: Maybe<
    CompanyContactWhereUniqueInput[] | CompanyContactWhereUniqueInput
  >;
  disconnect?: Maybe<
    CompanyContactWhereUniqueInput[] | CompanyContactWhereUniqueInput
  >;
  update?: Maybe<
    | CompanyContactUpdateWithWhereUniqueWithoutCompanyInput[]
    | CompanyContactUpdateWithWhereUniqueWithoutCompanyInput
  >;
  upsert?: Maybe<
    | CompanyContactUpsertWithWhereUniqueWithoutCompanyInput[]
    | CompanyContactUpsertWithWhereUniqueWithoutCompanyInput
  >;
  deleteMany?: Maybe<
    CompanyContactScalarWhereInput[] | CompanyContactScalarWhereInput
  >;
  updateMany?: Maybe<
    | CompanyContactUpdateManyWithWhereNestedInput[]
    | CompanyContactUpdateManyWithWhereNestedInput
  >;
}

export interface CompanyContactUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyContactWhereUniqueInput;
  data: CompanyContactUpdateWithoutCompanyDataInput;
}

export interface CompanyContactUpdateWithoutCompanyDataInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface CompanyContactUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyContactWhereUniqueInput;
  update: CompanyContactUpdateWithoutCompanyDataInput;
  create: CompanyContactCreateWithoutCompanyInput;
}

export interface CompanyContactScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<
    CompanyContactScalarWhereInput[] | CompanyContactScalarWhereInput
  >;
  OR?: Maybe<CompanyContactScalarWhereInput[] | CompanyContactScalarWhereInput>;
  NOT?: Maybe<
    CompanyContactScalarWhereInput[] | CompanyContactScalarWhereInput
  >;
}

export interface CompanyContactUpdateManyWithWhereNestedInput {
  where: CompanyContactScalarWhereInput;
  data: CompanyContactUpdateManyDataInput;
}

export interface CompanyContactUpdateManyDataInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface CompanyUpsertWithoutJobApplicationsInput {
  update: CompanyUpdateWithoutJobApplicationsDataInput;
  create: CompanyCreateWithoutJobApplicationsInput;
}

export interface GoogleMapsLocationUpdateOneInput {
  create?: Maybe<GoogleMapsLocationCreateInput>;
  update?: Maybe<GoogleMapsLocationUpdateDataInput>;
  upsert?: Maybe<GoogleMapsLocationUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<GoogleMapsLocationWhereUniqueInput>;
}

export interface GoogleMapsLocationUpdateDataInput {
  name?: Maybe<String>;
  googlePlacesId?: Maybe<String>;
}

export interface GoogleMapsLocationUpsertNestedInput {
  update: GoogleMapsLocationUpdateDataInput;
  create: GoogleMapsLocationCreateInput;
}

export interface JobApplicationResumeUpdateOneInput {
  create?: Maybe<JobApplicationResumeCreateInput>;
  update?: Maybe<JobApplicationResumeUpdateDataInput>;
  upsert?: Maybe<JobApplicationResumeUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<JobApplicationResumeWhereUniqueInput>;
}

export interface JobApplicationResumeUpdateDataInput {
  resume?: Maybe<ResumeUpdateOneInput>;
  selectedVersionId?: Maybe<String>;
}

export interface ResumeUpdateOneInput {
  create?: Maybe<ResumeCreateInput>;
  update?: Maybe<ResumeUpdateDataInput>;
  upsert?: Maybe<ResumeUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ResumeWhereUniqueInput>;
}

export interface ResumeUpdateDataInput {
  name?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutResumesInput>;
  versions?: Maybe<AwsFileDataUpdateManyInput>;
}

export interface UserUpdateOneRequiredWithoutResumesInput {
  create?: Maybe<UserCreateWithoutResumesInput>;
  update?: Maybe<UserUpdateWithoutResumesDataInput>;
  upsert?: Maybe<UserUpsertWithoutResumesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutResumesDataInput {
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoUpdateOneWithoutUserInput>;
  jobApplications?: Maybe<JobApplicationUpdateManyWithoutUserInput>;
  companies?: Maybe<CompanyUpdateManyWithoutUserInput>;
}

export interface CompanyUpdateManyWithoutUserInput {
  create?: Maybe<
    CompanyCreateWithoutUserInput[] | CompanyCreateWithoutUserInput
  >;
  delete?: Maybe<CompanyWhereUniqueInput[] | CompanyWhereUniqueInput>;
  connect?: Maybe<CompanyWhereUniqueInput[] | CompanyWhereUniqueInput>;
  set?: Maybe<CompanyWhereUniqueInput[] | CompanyWhereUniqueInput>;
  disconnect?: Maybe<CompanyWhereUniqueInput[] | CompanyWhereUniqueInput>;
  update?: Maybe<
    | CompanyUpdateWithWhereUniqueWithoutUserInput[]
    | CompanyUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | CompanyUpsertWithWhereUniqueWithoutUserInput[]
    | CompanyUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<CompanyScalarWhereInput[] | CompanyScalarWhereInput>;
  updateMany?: Maybe<
    | CompanyUpdateManyWithWhereNestedInput[]
    | CompanyUpdateManyWithWhereNestedInput
  >;
}

export interface CompanyUpdateWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput;
  data: CompanyUpdateWithoutUserDataInput;
}

export interface CompanyUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataUpdateOneInput>;
  contacts?: Maybe<CompanyContactUpdateManyWithoutCompanyInput>;
  jobApplications?: Maybe<JobApplicationUpdateManyWithoutCompanyInput>;
}

export interface JobApplicationUpdateManyWithoutCompanyInput {
  create?: Maybe<
    | JobApplicationCreateWithoutCompanyInput[]
    | JobApplicationCreateWithoutCompanyInput
  >;
  delete?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  connect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  set?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  disconnect?: Maybe<
    JobApplicationWhereUniqueInput[] | JobApplicationWhereUniqueInput
  >;
  update?: Maybe<
    | JobApplicationUpdateWithWhereUniqueWithoutCompanyInput[]
    | JobApplicationUpdateWithWhereUniqueWithoutCompanyInput
  >;
  upsert?: Maybe<
    | JobApplicationUpsertWithWhereUniqueWithoutCompanyInput[]
    | JobApplicationUpsertWithWhereUniqueWithoutCompanyInput
  >;
  deleteMany?: Maybe<
    JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput
  >;
  updateMany?: Maybe<
    | JobApplicationUpdateManyWithWhereNestedInput[]
    | JobApplicationUpdateManyWithWhereNestedInput
  >;
}

export interface JobApplicationUpdateWithWhereUniqueWithoutCompanyInput {
  where: JobApplicationWhereUniqueInput;
  data: JobApplicationUpdateWithoutCompanyDataInput;
}

export interface JobApplicationUpdateWithoutCompanyDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutJobApplicationsInput>;
  companyName?: Maybe<String>;
  position?: Maybe<String>;
  location?: Maybe<GoogleMapsLocationUpdateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeUpdateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationUpdatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataUpdateOneInput>;
  contacts?: Maybe<JobApplicationContactUpdateManyWithoutJobApplicationInput>;
}

export interface UserUpdateOneRequiredWithoutJobApplicationsInput {
  create?: Maybe<UserCreateWithoutJobApplicationsInput>;
  update?: Maybe<UserUpdateWithoutJobApplicationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutJobApplicationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutJobApplicationsDataInput {
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoUpdateOneWithoutUserInput>;
  companies?: Maybe<CompanyUpdateManyWithoutUserInput>;
  resumes?: Maybe<ResumeUpdateManyWithoutUserInput>;
}

export interface UserUpsertWithoutJobApplicationsInput {
  update: UserUpdateWithoutJobApplicationsDataInput;
  create: UserCreateWithoutJobApplicationsInput;
}

export interface JobApplicationUpdatedateInterviewingInput {
  set?: Maybe<DateTimeInput[] | DateTimeInput>;
}

export interface JobApplicationContactUpdateManyWithoutJobApplicationInput {
  create?: Maybe<
    | JobApplicationContactCreateWithoutJobApplicationInput[]
    | JobApplicationContactCreateWithoutJobApplicationInput
  >;
  delete?: Maybe<
    | JobApplicationContactWhereUniqueInput[]
    | JobApplicationContactWhereUniqueInput
  >;
  connect?: Maybe<
    | JobApplicationContactWhereUniqueInput[]
    | JobApplicationContactWhereUniqueInput
  >;
  set?: Maybe<
    | JobApplicationContactWhereUniqueInput[]
    | JobApplicationContactWhereUniqueInput
  >;
  disconnect?: Maybe<
    | JobApplicationContactWhereUniqueInput[]
    | JobApplicationContactWhereUniqueInput
  >;
  update?: Maybe<
    | JobApplicationContactUpdateWithWhereUniqueWithoutJobApplicationInput[]
    | JobApplicationContactUpdateWithWhereUniqueWithoutJobApplicationInput
  >;
  upsert?: Maybe<
    | JobApplicationContactUpsertWithWhereUniqueWithoutJobApplicationInput[]
    | JobApplicationContactUpsertWithWhereUniqueWithoutJobApplicationInput
  >;
  deleteMany?: Maybe<
    | JobApplicationContactScalarWhereInput[]
    | JobApplicationContactScalarWhereInput
  >;
  updateMany?: Maybe<
    | JobApplicationContactUpdateManyWithWhereNestedInput[]
    | JobApplicationContactUpdateManyWithWhereNestedInput
  >;
}

export interface JobApplicationContactUpdateWithWhereUniqueWithoutJobApplicationInput {
  where: JobApplicationContactWhereUniqueInput;
  data: JobApplicationContactUpdateWithoutJobApplicationDataInput;
}

export interface JobApplicationContactUpdateWithoutJobApplicationDataInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface JobApplicationContactUpsertWithWhereUniqueWithoutJobApplicationInput {
  where: JobApplicationContactWhereUniqueInput;
  update: JobApplicationContactUpdateWithoutJobApplicationDataInput;
  create: JobApplicationContactCreateWithoutJobApplicationInput;
}

export interface JobApplicationContactScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  order?: Maybe<Int>;
  order_not?: Maybe<Int>;
  order_in?: Maybe<Int[] | Int>;
  order_not_in?: Maybe<Int[] | Int>;
  order_lt?: Maybe<Int>;
  order_lte?: Maybe<Int>;
  order_gt?: Maybe<Int>;
  order_gte?: Maybe<Int>;
  AND?: Maybe<
    | JobApplicationContactScalarWhereInput[]
    | JobApplicationContactScalarWhereInput
  >;
  OR?: Maybe<
    | JobApplicationContactScalarWhereInput[]
    | JobApplicationContactScalarWhereInput
  >;
  NOT?: Maybe<
    | JobApplicationContactScalarWhereInput[]
    | JobApplicationContactScalarWhereInput
  >;
}

export interface JobApplicationContactUpdateManyWithWhereNestedInput {
  where: JobApplicationContactScalarWhereInput;
  data: JobApplicationContactUpdateManyDataInput;
}

export interface JobApplicationContactUpdateManyDataInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface JobApplicationUpsertWithWhereUniqueWithoutCompanyInput {
  where: JobApplicationWhereUniqueInput;
  update: JobApplicationUpdateWithoutCompanyDataInput;
  create: JobApplicationCreateWithoutCompanyInput;
}

export interface JobApplicationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  companyName?: Maybe<String>;
  companyName_not?: Maybe<String>;
  companyName_in?: Maybe<String[] | String>;
  companyName_not_in?: Maybe<String[] | String>;
  companyName_lt?: Maybe<String>;
  companyName_lte?: Maybe<String>;
  companyName_gt?: Maybe<String>;
  companyName_gte?: Maybe<String>;
  companyName_contains?: Maybe<String>;
  companyName_not_contains?: Maybe<String>;
  companyName_starts_with?: Maybe<String>;
  companyName_not_starts_with?: Maybe<String>;
  companyName_ends_with?: Maybe<String>;
  companyName_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  position?: Maybe<String>;
  position_not?: Maybe<String>;
  position_in?: Maybe<String[] | String>;
  position_not_in?: Maybe<String[] | String>;
  position_lt?: Maybe<String>;
  position_lte?: Maybe<String>;
  position_gt?: Maybe<String>;
  position_gte?: Maybe<String>;
  position_contains?: Maybe<String>;
  position_not_contains?: Maybe<String>;
  position_starts_with?: Maybe<String>;
  position_not_starts_with?: Maybe<String>;
  position_ends_with?: Maybe<String>;
  position_not_ends_with?: Maybe<String>;
  locationName?: Maybe<String>;
  locationName_not?: Maybe<String>;
  locationName_in?: Maybe<String[] | String>;
  locationName_not_in?: Maybe<String[] | String>;
  locationName_lt?: Maybe<String>;
  locationName_lte?: Maybe<String>;
  locationName_gt?: Maybe<String>;
  locationName_gte?: Maybe<String>;
  locationName_contains?: Maybe<String>;
  locationName_not_contains?: Maybe<String>;
  locationName_starts_with?: Maybe<String>;
  locationName_not_starts_with?: Maybe<String>;
  locationName_ends_with?: Maybe<String>;
  locationName_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  isRemote_not?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingLink_not?: Maybe<String>;
  jobListingLink_in?: Maybe<String[] | String>;
  jobListingLink_not_in?: Maybe<String[] | String>;
  jobListingLink_lt?: Maybe<String>;
  jobListingLink_lte?: Maybe<String>;
  jobListingLink_gt?: Maybe<String>;
  jobListingLink_gte?: Maybe<String>;
  jobListingLink_contains?: Maybe<String>;
  jobListingLink_not_contains?: Maybe<String>;
  jobListingLink_starts_with?: Maybe<String>;
  jobListingLink_not_starts_with?: Maybe<String>;
  jobListingLink_ends_with?: Maybe<String>;
  jobListingLink_not_ends_with?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  jobListingNotes_not?: Maybe<String>;
  jobListingNotes_in?: Maybe<String[] | String>;
  jobListingNotes_not_in?: Maybe<String[] | String>;
  jobListingNotes_lt?: Maybe<String>;
  jobListingNotes_lte?: Maybe<String>;
  jobListingNotes_gt?: Maybe<String>;
  jobListingNotes_gte?: Maybe<String>;
  jobListingNotes_contains?: Maybe<String>;
  jobListingNotes_not_contains?: Maybe<String>;
  jobListingNotes_starts_with?: Maybe<String>;
  jobListingNotes_not_starts_with?: Maybe<String>;
  jobListingNotes_ends_with?: Maybe<String>;
  jobListingNotes_not_ends_with?: Maybe<String>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  isApplicationActive_not?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateApplied_not?: Maybe<DateTimeInput>;
  dateApplied_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateApplied_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateApplied_lt?: Maybe<DateTimeInput>;
  dateApplied_lte?: Maybe<DateTimeInput>;
  dateApplied_gt?: Maybe<DateTimeInput>;
  dateApplied_gte?: Maybe<DateTimeInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateOffered_not?: Maybe<DateTimeInput>;
  dateOffered_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOffered_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateOffered_lt?: Maybe<DateTimeInput>;
  dateOffered_lte?: Maybe<DateTimeInput>;
  dateOffered_gt?: Maybe<DateTimeInput>;
  dateOffered_gte?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  dateDecided_not?: Maybe<DateTimeInput>;
  dateDecided_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateDecided_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateDecided_lt?: Maybe<DateTimeInput>;
  dateDecided_lte?: Maybe<DateTimeInput>;
  dateDecided_gt?: Maybe<DateTimeInput>;
  dateDecided_gte?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  jobDecision_not?: Maybe<JobDecision>;
  jobDecision_in?: Maybe<JobDecision[] | JobDecision>;
  jobDecision_not_in?: Maybe<JobDecision[] | JobDecision>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  applicationStatus?: Maybe<ApplicationStatus>;
  applicationStatus_not?: Maybe<ApplicationStatus>;
  applicationStatus_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  applicationStatus_not_in?: Maybe<ApplicationStatus[] | ApplicationStatus>;
  AND?: Maybe<
    JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput
  >;
  OR?: Maybe<JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput>;
  NOT?: Maybe<
    JobApplicationScalarWhereInput[] | JobApplicationScalarWhereInput
  >;
}

export interface JobApplicationUpdateManyWithWhereNestedInput {
  where: JobApplicationScalarWhereInput;
  data: JobApplicationUpdateManyDataInput;
}

export interface JobApplicationUpdateManyDataInput {
  companyName?: Maybe<String>;
  position?: Maybe<String>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationUpdatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
}

export interface CompanyUpsertWithWhereUniqueWithoutUserInput {
  where: CompanyWhereUniqueInput;
  update: CompanyUpdateWithoutUserDataInput;
  create: CompanyCreateWithoutUserInput;
}

export interface CompanyScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  rating?: Maybe<Int>;
  rating_not?: Maybe<Int>;
  rating_in?: Maybe<Int[] | Int>;
  rating_not_in?: Maybe<Int[] | Int>;
  rating_lt?: Maybe<Int>;
  rating_lte?: Maybe<Int>;
  rating_gt?: Maybe<Int>;
  rating_gte?: Maybe<Int>;
  notes?: Maybe<String>;
  notes_not?: Maybe<String>;
  notes_in?: Maybe<String[] | String>;
  notes_not_in?: Maybe<String[] | String>;
  notes_lt?: Maybe<String>;
  notes_lte?: Maybe<String>;
  notes_gt?: Maybe<String>;
  notes_gte?: Maybe<String>;
  notes_contains?: Maybe<String>;
  notes_not_contains?: Maybe<String>;
  notes_starts_with?: Maybe<String>;
  notes_not_starts_with?: Maybe<String>;
  notes_ends_with?: Maybe<String>;
  notes_not_ends_with?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  jobApplicationsCount_not?: Maybe<Int>;
  jobApplicationsCount_in?: Maybe<Int[] | Int>;
  jobApplicationsCount_not_in?: Maybe<Int[] | Int>;
  jobApplicationsCount_lt?: Maybe<Int>;
  jobApplicationsCount_lte?: Maybe<Int>;
  jobApplicationsCount_gt?: Maybe<Int>;
  jobApplicationsCount_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<CompanyScalarWhereInput[] | CompanyScalarWhereInput>;
  OR?: Maybe<CompanyScalarWhereInput[] | CompanyScalarWhereInput>;
  NOT?: Maybe<CompanyScalarWhereInput[] | CompanyScalarWhereInput>;
}

export interface CompanyUpdateManyWithWhereNestedInput {
  where: CompanyScalarWhereInput;
  data: CompanyUpdateManyDataInput;
}

export interface CompanyUpdateManyDataInput {
  name?: Maybe<String>;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
}

export interface UserUpsertWithoutResumesInput {
  update: UserUpdateWithoutResumesDataInput;
  create: UserCreateWithoutResumesInput;
}

export interface ResumeUpsertNestedInput {
  update: ResumeUpdateDataInput;
  create: ResumeCreateInput;
}

export interface JobApplicationResumeUpsertNestedInput {
  update: JobApplicationResumeUpdateDataInput;
  create: JobApplicationResumeCreateInput;
}

export interface JobApplicationUpsertWithWhereUniqueWithoutUserInput {
  where: JobApplicationWhereUniqueInput;
  update: JobApplicationUpdateWithoutUserDataInput;
  create: JobApplicationCreateWithoutUserInput;
}

export interface UserUpsertWithoutBillingInput {
  update: UserUpdateWithoutBillingDataInput;
  create: UserCreateWithoutBillingInput;
}

export interface BillingInfoUpdateManyMutationInput {
  stripeCustomerId?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
}

export interface CardCreateInput {
  id?: Maybe<ID_Input>;
  billingInfo: BillingInfoCreateOneWithoutCardInput;
  last4Digits: String;
  expMonth: Int;
  expYear: Int;
  brand: String;
  stripePaymentMethodId: String;
}

export interface BillingInfoCreateOneWithoutCardInput {
  create?: Maybe<BillingInfoCreateWithoutCardInput>;
  connect?: Maybe<BillingInfoWhereUniqueInput>;
}

export interface BillingInfoCreateWithoutCardInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutBillingInput;
  stripeCustomerId?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
}

export interface CardUpdateInput {
  billingInfo?: Maybe<BillingInfoUpdateOneRequiredWithoutCardInput>;
  last4Digits?: Maybe<String>;
  expMonth?: Maybe<Int>;
  expYear?: Maybe<Int>;
  brand?: Maybe<String>;
  stripePaymentMethodId?: Maybe<String>;
}

export interface BillingInfoUpdateOneRequiredWithoutCardInput {
  create?: Maybe<BillingInfoCreateWithoutCardInput>;
  update?: Maybe<BillingInfoUpdateWithoutCardDataInput>;
  upsert?: Maybe<BillingInfoUpsertWithoutCardInput>;
  connect?: Maybe<BillingInfoWhereUniqueInput>;
}

export interface BillingInfoUpdateWithoutCardDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutBillingInput>;
  stripeCustomerId?: Maybe<String>;
  stripeSubscriptionId?: Maybe<String>;
  billingFrequency?: Maybe<BillingFrequency>;
  startOfBillingPeriod?: Maybe<Int>;
  endOfBillingPeriod?: Maybe<Int>;
  willCancelAtEndOfPeriod?: Maybe<Boolean>;
  isPremiumActive?: Maybe<Boolean>;
}

export interface BillingInfoUpsertWithoutCardInput {
  update: BillingInfoUpdateWithoutCardDataInput;
  create: BillingInfoCreateWithoutCardInput;
}

export interface CardUpdateManyMutationInput {
  last4Digits?: Maybe<String>;
  expMonth?: Maybe<Int>;
  expYear?: Maybe<Int>;
  brand?: Maybe<String>;
  stripePaymentMethodId?: Maybe<String>;
}

export interface CompanyCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCompaniesInput;
  name: String;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataCreateOneInput>;
  contacts?: Maybe<CompanyContactCreateManyWithoutCompanyInput>;
  jobApplications?: Maybe<JobApplicationCreateManyWithoutCompanyInput>;
}

export interface CompanyUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCompaniesInput>;
  name?: Maybe<String>;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataUpdateOneInput>;
  contacts?: Maybe<CompanyContactUpdateManyWithoutCompanyInput>;
  jobApplications?: Maybe<JobApplicationUpdateManyWithoutCompanyInput>;
}

export interface CompanyUpdateManyMutationInput {
  name?: Maybe<String>;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
}

export interface CompanyContactCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  company: CompanyCreateOneWithoutContactsInput;
  order: Int;
}

export interface CompanyCreateOneWithoutContactsInput {
  create?: Maybe<CompanyCreateWithoutContactsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyCreateWithoutContactsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutCompaniesInput;
  name: String;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataCreateOneInput>;
  jobApplications?: Maybe<JobApplicationCreateManyWithoutCompanyInput>;
}

export interface CompanyContactUpdateInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  company?: Maybe<CompanyUpdateOneRequiredWithoutContactsInput>;
  order?: Maybe<Int>;
}

export interface CompanyUpdateOneRequiredWithoutContactsInput {
  create?: Maybe<CompanyCreateWithoutContactsInput>;
  update?: Maybe<CompanyUpdateWithoutContactsDataInput>;
  upsert?: Maybe<CompanyUpsertWithoutContactsInput>;
  connect?: Maybe<CompanyWhereUniqueInput>;
}

export interface CompanyUpdateWithoutContactsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutCompaniesInput>;
  name?: Maybe<String>;
  website?: Maybe<String>;
  rating?: Maybe<Int>;
  notes?: Maybe<String>;
  jobApplicationsCount?: Maybe<Int>;
  image?: Maybe<AwsFileDataUpdateOneInput>;
  jobApplications?: Maybe<JobApplicationUpdateManyWithoutCompanyInput>;
}

export interface CompanyUpsertWithoutContactsInput {
  update: CompanyUpdateWithoutContactsDataInput;
  create: CompanyCreateWithoutContactsInput;
}

export interface CompanyContactUpdateManyMutationInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface GoogleMapsLocationUpdateInput {
  name?: Maybe<String>;
  googlePlacesId?: Maybe<String>;
}

export interface GoogleMapsLocationUpdateManyMutationInput {
  name?: Maybe<String>;
  googlePlacesId?: Maybe<String>;
}

export interface JobApplicationCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutJobApplicationsInput;
  company: CompanyCreateOneWithoutJobApplicationsInput;
  companyName: String;
  position: String;
  location?: Maybe<GoogleMapsLocationCreateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeCreateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationCreatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataCreateOneInput>;
  contacts?: Maybe<JobApplicationContactCreateManyWithoutJobApplicationInput>;
}

export interface JobApplicationUpdateInput {
  user?: Maybe<UserUpdateOneRequiredWithoutJobApplicationsInput>;
  company?: Maybe<CompanyUpdateOneRequiredWithoutJobApplicationsInput>;
  companyName?: Maybe<String>;
  position?: Maybe<String>;
  location?: Maybe<GoogleMapsLocationUpdateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeUpdateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationUpdatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataUpdateOneInput>;
  contacts?: Maybe<JobApplicationContactUpdateManyWithoutJobApplicationInput>;
}

export interface JobApplicationUpdateManyMutationInput {
  companyName?: Maybe<String>;
  position?: Maybe<String>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationUpdatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
}

export interface JobApplicationContactCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order: Int;
  jobApplication: JobApplicationCreateOneWithoutContactsInput;
}

export interface JobApplicationCreateOneWithoutContactsInput {
  create?: Maybe<JobApplicationCreateWithoutContactsInput>;
  connect?: Maybe<JobApplicationWhereUniqueInput>;
}

export interface JobApplicationCreateWithoutContactsInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneWithoutJobApplicationsInput;
  company: CompanyCreateOneWithoutJobApplicationsInput;
  companyName: String;
  position: String;
  location?: Maybe<GoogleMapsLocationCreateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeCreateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationCreatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataCreateOneInput>;
}

export interface JobApplicationContactUpdateInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order?: Maybe<Int>;
  jobApplication?: Maybe<JobApplicationUpdateOneRequiredWithoutContactsInput>;
}

export interface JobApplicationUpdateOneRequiredWithoutContactsInput {
  create?: Maybe<JobApplicationCreateWithoutContactsInput>;
  update?: Maybe<JobApplicationUpdateWithoutContactsDataInput>;
  upsert?: Maybe<JobApplicationUpsertWithoutContactsInput>;
  connect?: Maybe<JobApplicationWhereUniqueInput>;
}

export interface JobApplicationUpdateWithoutContactsDataInput {
  user?: Maybe<UserUpdateOneRequiredWithoutJobApplicationsInput>;
  company?: Maybe<CompanyUpdateOneRequiredWithoutJobApplicationsInput>;
  companyName?: Maybe<String>;
  position?: Maybe<String>;
  location?: Maybe<GoogleMapsLocationUpdateOneInput>;
  locationName?: Maybe<String>;
  rating?: Maybe<Int>;
  isRemote?: Maybe<Boolean>;
  jobListingLink?: Maybe<String>;
  jobListingNotes?: Maybe<String>;
  resume?: Maybe<JobApplicationResumeUpdateOneInput>;
  notes?: Maybe<String>;
  isApplicationActive?: Maybe<Boolean>;
  dateApplied?: Maybe<DateTimeInput>;
  dateInterviewing?: Maybe<JobApplicationUpdatedateInterviewingInput>;
  dateOffered?: Maybe<DateTimeInput>;
  dateDecided?: Maybe<DateTimeInput>;
  jobDecision?: Maybe<JobDecision>;
  applicationStatus?: Maybe<ApplicationStatus>;
  coverLetterFile?: Maybe<AwsFileDataUpdateOneInput>;
}

export interface JobApplicationUpsertWithoutContactsInput {
  update: JobApplicationUpdateWithoutContactsDataInput;
  create: JobApplicationCreateWithoutContactsInput;
}

export interface JobApplicationContactUpdateManyMutationInput {
  name?: Maybe<String>;
  position?: Maybe<String>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
  notes?: Maybe<String>;
  order?: Maybe<Int>;
}

export interface JobApplicationResumeUpdateInput {
  resume?: Maybe<ResumeUpdateOneInput>;
  selectedVersionId?: Maybe<String>;
}

export interface JobApplicationResumeUpdateManyMutationInput {
  selectedVersionId?: Maybe<String>;
}

export interface ResumeUpdateInput {
  name?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutResumesInput>;
  versions?: Maybe<AwsFileDataUpdateManyInput>;
}

export interface ResumeUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email: String;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoCreateOneWithoutUserInput>;
  jobApplications?: Maybe<JobApplicationCreateManyWithoutUserInput>;
  companies?: Maybe<CompanyCreateManyWithoutUserInput>;
  resumes?: Maybe<ResumeCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  billing?: Maybe<BillingInfoUpdateOneWithoutUserInput>;
  jobApplications?: Maybe<JobApplicationUpdateManyWithoutUserInput>;
  companies?: Maybe<CompanyUpdateManyWithoutUserInput>;
  resumes?: Maybe<ResumeUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  resetToken?: Maybe<String>;
  resetTokenExpiry?: Maybe<Float>;
  emailConfirmationToken?: Maybe<String>;
  hasVerifiedEmail?: Maybe<Boolean>;
  hasCompletedOnboarding?: Maybe<Boolean>;
  googleId?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface AwsFileDataSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AwsFileDataWhereInput>;
  AND?: Maybe<
    AwsFileDataSubscriptionWhereInput[] | AwsFileDataSubscriptionWhereInput
  >;
  OR?: Maybe<
    AwsFileDataSubscriptionWhereInput[] | AwsFileDataSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AwsFileDataSubscriptionWhereInput[] | AwsFileDataSubscriptionWhereInput
  >;
}

export interface BillingInfoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<BillingInfoWhereInput>;
  AND?: Maybe<
    BillingInfoSubscriptionWhereInput[] | BillingInfoSubscriptionWhereInput
  >;
  OR?: Maybe<
    BillingInfoSubscriptionWhereInput[] | BillingInfoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    BillingInfoSubscriptionWhereInput[] | BillingInfoSubscriptionWhereInput
  >;
}

export interface CardSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CardWhereInput>;
  AND?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  OR?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
  NOT?: Maybe<CardSubscriptionWhereInput[] | CardSubscriptionWhereInput>;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyWhereInput>;
  AND?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  OR?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  NOT?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
}

export interface CompanyContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyContactWhereInput>;
  AND?: Maybe<
    | CompanyContactSubscriptionWhereInput[]
    | CompanyContactSubscriptionWhereInput
  >;
  OR?: Maybe<
    | CompanyContactSubscriptionWhereInput[]
    | CompanyContactSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | CompanyContactSubscriptionWhereInput[]
    | CompanyContactSubscriptionWhereInput
  >;
}

export interface GoogleMapsLocationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GoogleMapsLocationWhereInput>;
  AND?: Maybe<
    | GoogleMapsLocationSubscriptionWhereInput[]
    | GoogleMapsLocationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | GoogleMapsLocationSubscriptionWhereInput[]
    | GoogleMapsLocationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | GoogleMapsLocationSubscriptionWhereInput[]
    | GoogleMapsLocationSubscriptionWhereInput
  >;
}

export interface JobApplicationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobApplicationWhereInput>;
  AND?: Maybe<
    | JobApplicationSubscriptionWhereInput[]
    | JobApplicationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | JobApplicationSubscriptionWhereInput[]
    | JobApplicationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | JobApplicationSubscriptionWhereInput[]
    | JobApplicationSubscriptionWhereInput
  >;
}

export interface JobApplicationContactSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobApplicationContactWhereInput>;
  AND?: Maybe<
    | JobApplicationContactSubscriptionWhereInput[]
    | JobApplicationContactSubscriptionWhereInput
  >;
  OR?: Maybe<
    | JobApplicationContactSubscriptionWhereInput[]
    | JobApplicationContactSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | JobApplicationContactSubscriptionWhereInput[]
    | JobApplicationContactSubscriptionWhereInput
  >;
}

export interface JobApplicationResumeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<JobApplicationResumeWhereInput>;
  AND?: Maybe<
    | JobApplicationResumeSubscriptionWhereInput[]
    | JobApplicationResumeSubscriptionWhereInput
  >;
  OR?: Maybe<
    | JobApplicationResumeSubscriptionWhereInput[]
    | JobApplicationResumeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | JobApplicationResumeSubscriptionWhereInput[]
    | JobApplicationResumeSubscriptionWhereInput
  >;
}

export interface ResumeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ResumeWhereInput>;
  AND?: Maybe<ResumeSubscriptionWhereInput[] | ResumeSubscriptionWhereInput>;
  OR?: Maybe<ResumeSubscriptionWhereInput[] | ResumeSubscriptionWhereInput>;
  NOT?: Maybe<ResumeSubscriptionWhereInput[] | ResumeSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AwsFileData {
  id: ID_Output;
  ETag: String;
  Key: String;
  Location: String;
  s3Url: String;
  cloudfrontUrl: String;
  Bucket: String;
  VersionId: String;
  fileName: String;
  createdAt: DateTimeOutput;
}

export interface AwsFileDataPromise extends Promise<AwsFileData>, Fragmentable {
  id: () => Promise<ID_Output>;
  ETag: () => Promise<String>;
  Key: () => Promise<String>;
  Location: () => Promise<String>;
  s3Url: () => Promise<String>;
  cloudfrontUrl: () => Promise<String>;
  Bucket: () => Promise<String>;
  VersionId: () => Promise<String>;
  fileName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AwsFileDataSubscription
  extends Promise<AsyncIterator<AwsFileData>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ETag: () => Promise<AsyncIterator<String>>;
  Key: () => Promise<AsyncIterator<String>>;
  Location: () => Promise<AsyncIterator<String>>;
  s3Url: () => Promise<AsyncIterator<String>>;
  cloudfrontUrl: () => Promise<AsyncIterator<String>>;
  Bucket: () => Promise<AsyncIterator<String>>;
  VersionId: () => Promise<AsyncIterator<String>>;
  fileName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AwsFileDataNullablePromise
  extends Promise<AwsFileData | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ETag: () => Promise<String>;
  Key: () => Promise<String>;
  Location: () => Promise<String>;
  s3Url: () => Promise<String>;
  cloudfrontUrl: () => Promise<String>;
  Bucket: () => Promise<String>;
  VersionId: () => Promise<String>;
  fileName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AwsFileDataConnection {
  pageInfo: PageInfo;
  edges: AwsFileDataEdge[];
}

export interface AwsFileDataConnectionPromise
  extends Promise<AwsFileDataConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AwsFileDataEdge>>() => T;
  aggregate: <T = AggregateAwsFileDataPromise>() => T;
}

export interface AwsFileDataConnectionSubscription
  extends Promise<AsyncIterator<AwsFileDataConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AwsFileDataEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAwsFileDataSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AwsFileDataEdge {
  node: AwsFileData;
  cursor: String;
}

export interface AwsFileDataEdgePromise
  extends Promise<AwsFileDataEdge>,
    Fragmentable {
  node: <T = AwsFileDataPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AwsFileDataEdgeSubscription
  extends Promise<AsyncIterator<AwsFileDataEdge>>,
    Fragmentable {
  node: <T = AwsFileDataSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAwsFileData {
  count: Int;
}

export interface AggregateAwsFileDataPromise
  extends Promise<AggregateAwsFileData>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAwsFileDataSubscription
  extends Promise<AsyncIterator<AggregateAwsFileData>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BillingInfo {
  id: ID_Output;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  billingFrequency?: BillingFrequency;
  startOfBillingPeriod?: Int;
  endOfBillingPeriod?: Int;
  willCancelAtEndOfPeriod: Boolean;
  isPremiumActive: Boolean;
}

export interface BillingInfoPromise extends Promise<BillingInfo>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  stripeCustomerId: () => Promise<String>;
  stripeSubscriptionId: () => Promise<String>;
  billingFrequency: () => Promise<BillingFrequency>;
  startOfBillingPeriod: () => Promise<Int>;
  endOfBillingPeriod: () => Promise<Int>;
  willCancelAtEndOfPeriod: () => Promise<Boolean>;
  isPremiumActive: () => Promise<Boolean>;
  card: <T = CardPromise>() => T;
}

export interface BillingInfoSubscription
  extends Promise<AsyncIterator<BillingInfo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
  stripeSubscriptionId: () => Promise<AsyncIterator<String>>;
  billingFrequency: () => Promise<AsyncIterator<BillingFrequency>>;
  startOfBillingPeriod: () => Promise<AsyncIterator<Int>>;
  endOfBillingPeriod: () => Promise<AsyncIterator<Int>>;
  willCancelAtEndOfPeriod: () => Promise<AsyncIterator<Boolean>>;
  isPremiumActive: () => Promise<AsyncIterator<Boolean>>;
  card: <T = CardSubscription>() => T;
}

export interface BillingInfoNullablePromise
  extends Promise<BillingInfo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  stripeCustomerId: () => Promise<String>;
  stripeSubscriptionId: () => Promise<String>;
  billingFrequency: () => Promise<BillingFrequency>;
  startOfBillingPeriod: () => Promise<Int>;
  endOfBillingPeriod: () => Promise<Int>;
  willCancelAtEndOfPeriod: () => Promise<Boolean>;
  isPremiumActive: () => Promise<Boolean>;
  card: <T = CardPromise>() => T;
}

export interface User {
  id: ID_Output;
  resetToken?: String;
  resetTokenExpiry?: Float;
  emailConfirmationToken?: String;
  hasVerifiedEmail?: Boolean;
  hasCompletedOnboarding: Boolean;
  googleId?: String;
  email: String;
  password?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  emailConfirmationToken: () => Promise<String>;
  hasVerifiedEmail: () => Promise<Boolean>;
  hasCompletedOnboarding: () => Promise<Boolean>;
  googleId: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  billing: <T = BillingInfoPromise>() => T;
  jobApplications: <T = FragmentableArray<JobApplication>>(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  companies: <T = FragmentableArray<Company>>(args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resumes: <T = FragmentableArray<Resume>>(args?: {
    where?: ResumeWhereInput;
    orderBy?: ResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  emailConfirmationToken: () => Promise<AsyncIterator<String>>;
  hasVerifiedEmail: () => Promise<AsyncIterator<Boolean>>;
  hasCompletedOnboarding: () => Promise<AsyncIterator<Boolean>>;
  googleId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  billing: <T = BillingInfoSubscription>() => T;
  jobApplications: <
    T = Promise<AsyncIterator<JobApplicationSubscription>>
  >(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  companies: <T = Promise<AsyncIterator<CompanySubscription>>>(args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resumes: <T = Promise<AsyncIterator<ResumeSubscription>>>(args?: {
    where?: ResumeWhereInput;
    orderBy?: ResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  emailConfirmationToken: () => Promise<String>;
  hasVerifiedEmail: () => Promise<Boolean>;
  hasCompletedOnboarding: () => Promise<Boolean>;
  googleId: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  billing: <T = BillingInfoPromise>() => T;
  jobApplications: <T = FragmentableArray<JobApplication>>(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  companies: <T = FragmentableArray<Company>>(args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resumes: <T = FragmentableArray<Resume>>(args?: {
    where?: ResumeWhereInput;
    orderBy?: ResumeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface JobApplication {
  id: ID_Output;
  companyName: String;
  createdAt: DateTimeOutput;
  position: String;
  locationName?: String;
  rating?: Int;
  isRemote: Boolean;
  jobListingLink?: String;
  jobListingNotes?: String;
  notes?: String;
  isApplicationActive: Boolean;
  dateApplied?: DateTimeOutput;
  dateInterviewing: DateTimeOutput[];
  dateOffered?: DateTimeOutput;
  dateDecided?: DateTimeOutput;
  jobDecision?: JobDecision;
  updatedAt: DateTimeOutput;
  applicationStatus: ApplicationStatus;
}

export interface JobApplicationPromise
  extends Promise<JobApplication>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  company: <T = CompanyPromise>() => T;
  companyName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  position: () => Promise<String>;
  location: <T = GoogleMapsLocationPromise>() => T;
  locationName: () => Promise<String>;
  rating: () => Promise<Int>;
  isRemote: () => Promise<Boolean>;
  jobListingLink: () => Promise<String>;
  jobListingNotes: () => Promise<String>;
  resume: <T = JobApplicationResumePromise>() => T;
  notes: () => Promise<String>;
  isApplicationActive: () => Promise<Boolean>;
  dateApplied: () => Promise<DateTimeOutput>;
  dateInterviewing: () => Promise<DateTimeOutput[]>;
  dateOffered: () => Promise<DateTimeOutput>;
  dateDecided: () => Promise<DateTimeOutput>;
  jobDecision: () => Promise<JobDecision>;
  updatedAt: () => Promise<DateTimeOutput>;
  applicationStatus: () => Promise<ApplicationStatus>;
  coverLetterFile: <T = AwsFileDataPromise>() => T;
  contacts: <T = FragmentableArray<JobApplicationContact>>(args?: {
    where?: JobApplicationContactWhereInput;
    orderBy?: JobApplicationContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface JobApplicationSubscription
  extends Promise<AsyncIterator<JobApplication>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  company: <T = CompanySubscription>() => T;
  companyName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  position: () => Promise<AsyncIterator<String>>;
  location: <T = GoogleMapsLocationSubscription>() => T;
  locationName: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  isRemote: () => Promise<AsyncIterator<Boolean>>;
  jobListingLink: () => Promise<AsyncIterator<String>>;
  jobListingNotes: () => Promise<AsyncIterator<String>>;
  resume: <T = JobApplicationResumeSubscription>() => T;
  notes: () => Promise<AsyncIterator<String>>;
  isApplicationActive: () => Promise<AsyncIterator<Boolean>>;
  dateApplied: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateInterviewing: () => Promise<AsyncIterator<DateTimeOutput[]>>;
  dateOffered: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateDecided: () => Promise<AsyncIterator<DateTimeOutput>>;
  jobDecision: () => Promise<AsyncIterator<JobDecision>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  applicationStatus: () => Promise<AsyncIterator<ApplicationStatus>>;
  coverLetterFile: <T = AwsFileDataSubscription>() => T;
  contacts: <
    T = Promise<AsyncIterator<JobApplicationContactSubscription>>
  >(args?: {
    where?: JobApplicationContactWhereInput;
    orderBy?: JobApplicationContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface JobApplicationNullablePromise
  extends Promise<JobApplication | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  company: <T = CompanyPromise>() => T;
  companyName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  position: () => Promise<String>;
  location: <T = GoogleMapsLocationPromise>() => T;
  locationName: () => Promise<String>;
  rating: () => Promise<Int>;
  isRemote: () => Promise<Boolean>;
  jobListingLink: () => Promise<String>;
  jobListingNotes: () => Promise<String>;
  resume: <T = JobApplicationResumePromise>() => T;
  notes: () => Promise<String>;
  isApplicationActive: () => Promise<Boolean>;
  dateApplied: () => Promise<DateTimeOutput>;
  dateInterviewing: () => Promise<DateTimeOutput[]>;
  dateOffered: () => Promise<DateTimeOutput>;
  dateDecided: () => Promise<DateTimeOutput>;
  jobDecision: () => Promise<JobDecision>;
  updatedAt: () => Promise<DateTimeOutput>;
  applicationStatus: () => Promise<ApplicationStatus>;
  coverLetterFile: <T = AwsFileDataPromise>() => T;
  contacts: <T = FragmentableArray<JobApplicationContact>>(args?: {
    where?: JobApplicationContactWhereInput;
    orderBy?: JobApplicationContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface Company {
  id: ID_Output;
  name: String;
  website?: String;
  rating?: Int;
  notes?: String;
  jobApplicationsCount: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  website: () => Promise<String>;
  rating: () => Promise<Int>;
  notes: () => Promise<String>;
  jobApplicationsCount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  image: <T = AwsFileDataPromise>() => T;
  contacts: <T = FragmentableArray<CompanyContact>>(args?: {
    where?: CompanyContactWhereInput;
    orderBy?: CompanyContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobApplications: <T = FragmentableArray<JobApplication>>(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  name: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  notes: () => Promise<AsyncIterator<String>>;
  jobApplicationsCount: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  image: <T = AwsFileDataSubscription>() => T;
  contacts: <T = Promise<AsyncIterator<CompanyContactSubscription>>>(args?: {
    where?: CompanyContactWhereInput;
    orderBy?: CompanyContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobApplications: <
    T = Promise<AsyncIterator<JobApplicationSubscription>>
  >(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompanyNullablePromise
  extends Promise<Company | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  name: () => Promise<String>;
  website: () => Promise<String>;
  rating: () => Promise<Int>;
  notes: () => Promise<String>;
  jobApplicationsCount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  image: <T = AwsFileDataPromise>() => T;
  contacts: <T = FragmentableArray<CompanyContact>>(args?: {
    where?: CompanyContactWhereInput;
    orderBy?: CompanyContactOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  jobApplications: <T = FragmentableArray<JobApplication>>(args?: {
    where?: JobApplicationWhereInput;
    orderBy?: JobApplicationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CompanyContact {
  id: ID_Output;
  name: String;
  position?: String;
  email?: String;
  phone?: String;
  notes?: String;
  order: Int;
}

export interface CompanyContactPromise
  extends Promise<CompanyContact>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  position: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  notes: () => Promise<String>;
  company: <T = CompanyPromise>() => T;
  order: () => Promise<Int>;
}

export interface CompanyContactSubscription
  extends Promise<AsyncIterator<CompanyContact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  company: <T = CompanySubscription>() => T;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyContactNullablePromise
  extends Promise<CompanyContact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  position: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  notes: () => Promise<String>;
  company: <T = CompanyPromise>() => T;
  order: () => Promise<Int>;
}

export interface GoogleMapsLocation {
  id: ID_Output;
  name: String;
  googlePlacesId: String;
}

export interface GoogleMapsLocationPromise
  extends Promise<GoogleMapsLocation>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  googlePlacesId: () => Promise<String>;
}

export interface GoogleMapsLocationSubscription
  extends Promise<AsyncIterator<GoogleMapsLocation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  googlePlacesId: () => Promise<AsyncIterator<String>>;
}

export interface GoogleMapsLocationNullablePromise
  extends Promise<GoogleMapsLocation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  googlePlacesId: () => Promise<String>;
}

export interface JobApplicationResume {
  id: ID_Output;
  selectedVersionId: String;
}

export interface JobApplicationResumePromise
  extends Promise<JobApplicationResume>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resume: <T = ResumePromise>() => T;
  selectedVersionId: () => Promise<String>;
}

export interface JobApplicationResumeSubscription
  extends Promise<AsyncIterator<JobApplicationResume>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resume: <T = ResumeSubscription>() => T;
  selectedVersionId: () => Promise<AsyncIterator<String>>;
}

export interface JobApplicationResumeNullablePromise
  extends Promise<JobApplicationResume | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resume: <T = ResumePromise>() => T;
  selectedVersionId: () => Promise<String>;
}

export interface Resume {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ResumePromise extends Promise<Resume>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  versions: <T = FragmentableArray<AwsFileData>>(args?: {
    where?: AwsFileDataWhereInput;
    orderBy?: AwsFileDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ResumeSubscription
  extends Promise<AsyncIterator<Resume>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
  versions: <T = Promise<AsyncIterator<AwsFileDataSubscription>>>(args?: {
    where?: AwsFileDataWhereInput;
    orderBy?: AwsFileDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ResumeNullablePromise
  extends Promise<Resume | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
  versions: <T = FragmentableArray<AwsFileData>>(args?: {
    where?: AwsFileDataWhereInput;
    orderBy?: AwsFileDataOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface JobApplicationContact {
  id: ID_Output;
  name: String;
  position?: String;
  email?: String;
  phone?: String;
  notes?: String;
  order: Int;
}

export interface JobApplicationContactPromise
  extends Promise<JobApplicationContact>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  position: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  notes: () => Promise<String>;
  order: () => Promise<Int>;
  jobApplication: <T = JobApplicationPromise>() => T;
}

export interface JobApplicationContactSubscription
  extends Promise<AsyncIterator<JobApplicationContact>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
  jobApplication: <T = JobApplicationSubscription>() => T;
}

export interface JobApplicationContactNullablePromise
  extends Promise<JobApplicationContact | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  position: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  notes: () => Promise<String>;
  order: () => Promise<Int>;
  jobApplication: <T = JobApplicationPromise>() => T;
}

export interface Card {
  id: ID_Output;
  last4Digits: String;
  expMonth: Int;
  expYear: Int;
  brand: String;
  stripePaymentMethodId: String;
}

export interface CardPromise extends Promise<Card>, Fragmentable {
  id: () => Promise<ID_Output>;
  billingInfo: <T = BillingInfoPromise>() => T;
  last4Digits: () => Promise<String>;
  expMonth: () => Promise<Int>;
  expYear: () => Promise<Int>;
  brand: () => Promise<String>;
  stripePaymentMethodId: () => Promise<String>;
}

export interface CardSubscription
  extends Promise<AsyncIterator<Card>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  billingInfo: <T = BillingInfoSubscription>() => T;
  last4Digits: () => Promise<AsyncIterator<String>>;
  expMonth: () => Promise<AsyncIterator<Int>>;
  expYear: () => Promise<AsyncIterator<Int>>;
  brand: () => Promise<AsyncIterator<String>>;
  stripePaymentMethodId: () => Promise<AsyncIterator<String>>;
}

export interface CardNullablePromise
  extends Promise<Card | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  billingInfo: <T = BillingInfoPromise>() => T;
  last4Digits: () => Promise<String>;
  expMonth: () => Promise<Int>;
  expYear: () => Promise<Int>;
  brand: () => Promise<String>;
  stripePaymentMethodId: () => Promise<String>;
}

export interface BillingInfoConnection {
  pageInfo: PageInfo;
  edges: BillingInfoEdge[];
}

export interface BillingInfoConnectionPromise
  extends Promise<BillingInfoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<BillingInfoEdge>>() => T;
  aggregate: <T = AggregateBillingInfoPromise>() => T;
}

export interface BillingInfoConnectionSubscription
  extends Promise<AsyncIterator<BillingInfoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<BillingInfoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateBillingInfoSubscription>() => T;
}

export interface BillingInfoEdge {
  node: BillingInfo;
  cursor: String;
}

export interface BillingInfoEdgePromise
  extends Promise<BillingInfoEdge>,
    Fragmentable {
  node: <T = BillingInfoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface BillingInfoEdgeSubscription
  extends Promise<AsyncIterator<BillingInfoEdge>>,
    Fragmentable {
  node: <T = BillingInfoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateBillingInfo {
  count: Int;
}

export interface AggregateBillingInfoPromise
  extends Promise<AggregateBillingInfo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateBillingInfoSubscription
  extends Promise<AsyncIterator<AggregateBillingInfo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CardConnection {
  pageInfo: PageInfo;
  edges: CardEdge[];
}

export interface CardConnectionPromise
  extends Promise<CardConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CardEdge>>() => T;
  aggregate: <T = AggregateCardPromise>() => T;
}

export interface CardConnectionSubscription
  extends Promise<AsyncIterator<CardConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CardEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCardSubscription>() => T;
}

export interface CardEdge {
  node: Card;
  cursor: String;
}

export interface CardEdgePromise extends Promise<CardEdge>, Fragmentable {
  node: <T = CardPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CardEdgeSubscription
  extends Promise<AsyncIterator<CardEdge>>,
    Fragmentable {
  node: <T = CardSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCard {
  count: Int;
}

export interface AggregateCardPromise
  extends Promise<AggregateCard>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCardSubscription
  extends Promise<AsyncIterator<AggregateCard>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CompanyContactConnection {
  pageInfo: PageInfo;
  edges: CompanyContactEdge[];
}

export interface CompanyContactConnectionPromise
  extends Promise<CompanyContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyContactEdge>>() => T;
  aggregate: <T = AggregateCompanyContactPromise>() => T;
}

export interface CompanyContactConnectionSubscription
  extends Promise<AsyncIterator<CompanyContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyContactEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanyContactSubscription>() => T;
}

export interface CompanyContactEdge {
  node: CompanyContact;
  cursor: String;
}

export interface CompanyContactEdgePromise
  extends Promise<CompanyContactEdge>,
    Fragmentable {
  node: <T = CompanyContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyContactEdgeSubscription
  extends Promise<AsyncIterator<CompanyContactEdge>>,
    Fragmentable {
  node: <T = CompanyContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompanyContact {
  count: Int;
}

export interface AggregateCompanyContactPromise
  extends Promise<AggregateCompanyContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanyContactSubscription
  extends Promise<AsyncIterator<AggregateCompanyContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface GoogleMapsLocationConnection {
  pageInfo: PageInfo;
  edges: GoogleMapsLocationEdge[];
}

export interface GoogleMapsLocationConnectionPromise
  extends Promise<GoogleMapsLocationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GoogleMapsLocationEdge>>() => T;
  aggregate: <T = AggregateGoogleMapsLocationPromise>() => T;
}

export interface GoogleMapsLocationConnectionSubscription
  extends Promise<AsyncIterator<GoogleMapsLocationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<GoogleMapsLocationEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateGoogleMapsLocationSubscription>() => T;
}

export interface GoogleMapsLocationEdge {
  node: GoogleMapsLocation;
  cursor: String;
}

export interface GoogleMapsLocationEdgePromise
  extends Promise<GoogleMapsLocationEdge>,
    Fragmentable {
  node: <T = GoogleMapsLocationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GoogleMapsLocationEdgeSubscription
  extends Promise<AsyncIterator<GoogleMapsLocationEdge>>,
    Fragmentable {
  node: <T = GoogleMapsLocationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateGoogleMapsLocation {
  count: Int;
}

export interface AggregateGoogleMapsLocationPromise
  extends Promise<AggregateGoogleMapsLocation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGoogleMapsLocationSubscription
  extends Promise<AsyncIterator<AggregateGoogleMapsLocation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JobApplicationConnection {
  pageInfo: PageInfo;
  edges: JobApplicationEdge[];
}

export interface JobApplicationConnectionPromise
  extends Promise<JobApplicationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobApplicationEdge>>() => T;
  aggregate: <T = AggregateJobApplicationPromise>() => T;
}

export interface JobApplicationConnectionSubscription
  extends Promise<AsyncIterator<JobApplicationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<JobApplicationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateJobApplicationSubscription>() => T;
}

export interface JobApplicationEdge {
  node: JobApplication;
  cursor: String;
}

export interface JobApplicationEdgePromise
  extends Promise<JobApplicationEdge>,
    Fragmentable {
  node: <T = JobApplicationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobApplicationEdgeSubscription
  extends Promise<AsyncIterator<JobApplicationEdge>>,
    Fragmentable {
  node: <T = JobApplicationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJobApplication {
  count: Int;
}

export interface AggregateJobApplicationPromise
  extends Promise<AggregateJobApplication>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobApplicationSubscription
  extends Promise<AsyncIterator<AggregateJobApplication>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JobApplicationContactConnection {
  pageInfo: PageInfo;
  edges: JobApplicationContactEdge[];
}

export interface JobApplicationContactConnectionPromise
  extends Promise<JobApplicationContactConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobApplicationContactEdge>>() => T;
  aggregate: <T = AggregateJobApplicationContactPromise>() => T;
}

export interface JobApplicationContactConnectionSubscription
  extends Promise<AsyncIterator<JobApplicationContactConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<JobApplicationContactEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateJobApplicationContactSubscription>() => T;
}

export interface JobApplicationContactEdge {
  node: JobApplicationContact;
  cursor: String;
}

export interface JobApplicationContactEdgePromise
  extends Promise<JobApplicationContactEdge>,
    Fragmentable {
  node: <T = JobApplicationContactPromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobApplicationContactEdgeSubscription
  extends Promise<AsyncIterator<JobApplicationContactEdge>>,
    Fragmentable {
  node: <T = JobApplicationContactSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJobApplicationContact {
  count: Int;
}

export interface AggregateJobApplicationContactPromise
  extends Promise<AggregateJobApplicationContact>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobApplicationContactSubscription
  extends Promise<AsyncIterator<AggregateJobApplicationContact>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JobApplicationResumeConnection {
  pageInfo: PageInfo;
  edges: JobApplicationResumeEdge[];
}

export interface JobApplicationResumeConnectionPromise
  extends Promise<JobApplicationResumeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<JobApplicationResumeEdge>>() => T;
  aggregate: <T = AggregateJobApplicationResumePromise>() => T;
}

export interface JobApplicationResumeConnectionSubscription
  extends Promise<AsyncIterator<JobApplicationResumeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<JobApplicationResumeEdgeSubscription>>
  >() => T;
  aggregate: <T = AggregateJobApplicationResumeSubscription>() => T;
}

export interface JobApplicationResumeEdge {
  node: JobApplicationResume;
  cursor: String;
}

export interface JobApplicationResumeEdgePromise
  extends Promise<JobApplicationResumeEdge>,
    Fragmentable {
  node: <T = JobApplicationResumePromise>() => T;
  cursor: () => Promise<String>;
}

export interface JobApplicationResumeEdgeSubscription
  extends Promise<AsyncIterator<JobApplicationResumeEdge>>,
    Fragmentable {
  node: <T = JobApplicationResumeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJobApplicationResume {
  count: Int;
}

export interface AggregateJobApplicationResumePromise
  extends Promise<AggregateJobApplicationResume>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJobApplicationResumeSubscription
  extends Promise<AsyncIterator<AggregateJobApplicationResume>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ResumeConnection {
  pageInfo: PageInfo;
  edges: ResumeEdge[];
}

export interface ResumeConnectionPromise
  extends Promise<ResumeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ResumeEdge>>() => T;
  aggregate: <T = AggregateResumePromise>() => T;
}

export interface ResumeConnectionSubscription
  extends Promise<AsyncIterator<ResumeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ResumeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateResumeSubscription>() => T;
}

export interface ResumeEdge {
  node: Resume;
  cursor: String;
}

export interface ResumeEdgePromise extends Promise<ResumeEdge>, Fragmentable {
  node: <T = ResumePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ResumeEdgeSubscription
  extends Promise<AsyncIterator<ResumeEdge>>,
    Fragmentable {
  node: <T = ResumeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateResume {
  count: Int;
}

export interface AggregateResumePromise
  extends Promise<AggregateResume>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateResumeSubscription
  extends Promise<AsyncIterator<AggregateResume>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AwsFileDataSubscriptionPayload {
  mutation: MutationType;
  node: AwsFileData;
  updatedFields: String[];
  previousValues: AwsFileDataPreviousValues;
}

export interface AwsFileDataSubscriptionPayloadPromise
  extends Promise<AwsFileDataSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AwsFileDataPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AwsFileDataPreviousValuesPromise>() => T;
}

export interface AwsFileDataSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AwsFileDataSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AwsFileDataSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AwsFileDataPreviousValuesSubscription>() => T;
}

export interface AwsFileDataPreviousValues {
  id: ID_Output;
  ETag: String;
  Key: String;
  Location: String;
  s3Url: String;
  cloudfrontUrl: String;
  Bucket: String;
  VersionId: String;
  fileName: String;
  createdAt: DateTimeOutput;
}

export interface AwsFileDataPreviousValuesPromise
  extends Promise<AwsFileDataPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  ETag: () => Promise<String>;
  Key: () => Promise<String>;
  Location: () => Promise<String>;
  s3Url: () => Promise<String>;
  cloudfrontUrl: () => Promise<String>;
  Bucket: () => Promise<String>;
  VersionId: () => Promise<String>;
  fileName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface AwsFileDataPreviousValuesSubscription
  extends Promise<AsyncIterator<AwsFileDataPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  ETag: () => Promise<AsyncIterator<String>>;
  Key: () => Promise<AsyncIterator<String>>;
  Location: () => Promise<AsyncIterator<String>>;
  s3Url: () => Promise<AsyncIterator<String>>;
  cloudfrontUrl: () => Promise<AsyncIterator<String>>;
  Bucket: () => Promise<AsyncIterator<String>>;
  VersionId: () => Promise<AsyncIterator<String>>;
  fileName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface BillingInfoSubscriptionPayload {
  mutation: MutationType;
  node: BillingInfo;
  updatedFields: String[];
  previousValues: BillingInfoPreviousValues;
}

export interface BillingInfoSubscriptionPayloadPromise
  extends Promise<BillingInfoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = BillingInfoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = BillingInfoPreviousValuesPromise>() => T;
}

export interface BillingInfoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<BillingInfoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = BillingInfoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = BillingInfoPreviousValuesSubscription>() => T;
}

export interface BillingInfoPreviousValues {
  id: ID_Output;
  stripeCustomerId?: String;
  stripeSubscriptionId?: String;
  billingFrequency?: BillingFrequency;
  startOfBillingPeriod?: Int;
  endOfBillingPeriod?: Int;
  willCancelAtEndOfPeriod: Boolean;
  isPremiumActive: Boolean;
}

export interface BillingInfoPreviousValuesPromise
  extends Promise<BillingInfoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  stripeCustomerId: () => Promise<String>;
  stripeSubscriptionId: () => Promise<String>;
  billingFrequency: () => Promise<BillingFrequency>;
  startOfBillingPeriod: () => Promise<Int>;
  endOfBillingPeriod: () => Promise<Int>;
  willCancelAtEndOfPeriod: () => Promise<Boolean>;
  isPremiumActive: () => Promise<Boolean>;
}

export interface BillingInfoPreviousValuesSubscription
  extends Promise<AsyncIterator<BillingInfoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  stripeCustomerId: () => Promise<AsyncIterator<String>>;
  stripeSubscriptionId: () => Promise<AsyncIterator<String>>;
  billingFrequency: () => Promise<AsyncIterator<BillingFrequency>>;
  startOfBillingPeriod: () => Promise<AsyncIterator<Int>>;
  endOfBillingPeriod: () => Promise<AsyncIterator<Int>>;
  willCancelAtEndOfPeriod: () => Promise<AsyncIterator<Boolean>>;
  isPremiumActive: () => Promise<AsyncIterator<Boolean>>;
}

export interface CardSubscriptionPayload {
  mutation: MutationType;
  node: Card;
  updatedFields: String[];
  previousValues: CardPreviousValues;
}

export interface CardSubscriptionPayloadPromise
  extends Promise<CardSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CardPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CardPreviousValuesPromise>() => T;
}

export interface CardSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CardSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CardSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CardPreviousValuesSubscription>() => T;
}

export interface CardPreviousValues {
  id: ID_Output;
  last4Digits: String;
  expMonth: Int;
  expYear: Int;
  brand: String;
  stripePaymentMethodId: String;
}

export interface CardPreviousValuesPromise
  extends Promise<CardPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  last4Digits: () => Promise<String>;
  expMonth: () => Promise<Int>;
  expYear: () => Promise<Int>;
  brand: () => Promise<String>;
  stripePaymentMethodId: () => Promise<String>;
}

export interface CardPreviousValuesSubscription
  extends Promise<AsyncIterator<CardPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  last4Digits: () => Promise<AsyncIterator<String>>;
  expMonth: () => Promise<AsyncIterator<Int>>;
  expYear: () => Promise<AsyncIterator<Int>>;
  brand: () => Promise<AsyncIterator<String>>;
  stripePaymentMethodId: () => Promise<AsyncIterator<String>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  name: String;
  website?: String;
  rating?: Int;
  notes?: String;
  jobApplicationsCount: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  website: () => Promise<String>;
  rating: () => Promise<Int>;
  notes: () => Promise<String>;
  jobApplicationsCount: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  notes: () => Promise<AsyncIterator<String>>;
  jobApplicationsCount: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface CompanyContactSubscriptionPayload {
  mutation: MutationType;
  node: CompanyContact;
  updatedFields: String[];
  previousValues: CompanyContactPreviousValues;
}

export interface CompanyContactSubscriptionPayloadPromise
  extends Promise<CompanyContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyContactPreviousValuesPromise>() => T;
}

export interface CompanyContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanyContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanyContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyContactPreviousValuesSubscription>() => T;
}

export interface CompanyContactPreviousValues {
  id: ID_Output;
  name: String;
  position?: String;
  email?: String;
  phone?: String;
  notes?: String;
  order: Int;
}

export interface CompanyContactPreviousValuesPromise
  extends Promise<CompanyContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  position: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  notes: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface CompanyContactPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface GoogleMapsLocationSubscriptionPayload {
  mutation: MutationType;
  node: GoogleMapsLocation;
  updatedFields: String[];
  previousValues: GoogleMapsLocationPreviousValues;
}

export interface GoogleMapsLocationSubscriptionPayloadPromise
  extends Promise<GoogleMapsLocationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GoogleMapsLocationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GoogleMapsLocationPreviousValuesPromise>() => T;
}

export interface GoogleMapsLocationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GoogleMapsLocationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GoogleMapsLocationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GoogleMapsLocationPreviousValuesSubscription>() => T;
}

export interface GoogleMapsLocationPreviousValues {
  id: ID_Output;
  name: String;
  googlePlacesId: String;
}

export interface GoogleMapsLocationPreviousValuesPromise
  extends Promise<GoogleMapsLocationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  googlePlacesId: () => Promise<String>;
}

export interface GoogleMapsLocationPreviousValuesSubscription
  extends Promise<AsyncIterator<GoogleMapsLocationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  googlePlacesId: () => Promise<AsyncIterator<String>>;
}

export interface JobApplicationSubscriptionPayload {
  mutation: MutationType;
  node: JobApplication;
  updatedFields: String[];
  previousValues: JobApplicationPreviousValues;
}

export interface JobApplicationSubscriptionPayloadPromise
  extends Promise<JobApplicationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobApplicationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobApplicationPreviousValuesPromise>() => T;
}

export interface JobApplicationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobApplicationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobApplicationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobApplicationPreviousValuesSubscription>() => T;
}

export interface JobApplicationPreviousValues {
  id: ID_Output;
  companyName: String;
  createdAt: DateTimeOutput;
  position: String;
  locationName?: String;
  rating?: Int;
  isRemote: Boolean;
  jobListingLink?: String;
  jobListingNotes?: String;
  notes?: String;
  isApplicationActive: Boolean;
  dateApplied?: DateTimeOutput;
  dateInterviewing: DateTimeOutput[];
  dateOffered?: DateTimeOutput;
  dateDecided?: DateTimeOutput;
  jobDecision?: JobDecision;
  updatedAt: DateTimeOutput;
  applicationStatus: ApplicationStatus;
}

export interface JobApplicationPreviousValuesPromise
  extends Promise<JobApplicationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  companyName: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  position: () => Promise<String>;
  locationName: () => Promise<String>;
  rating: () => Promise<Int>;
  isRemote: () => Promise<Boolean>;
  jobListingLink: () => Promise<String>;
  jobListingNotes: () => Promise<String>;
  notes: () => Promise<String>;
  isApplicationActive: () => Promise<Boolean>;
  dateApplied: () => Promise<DateTimeOutput>;
  dateInterviewing: () => Promise<DateTimeOutput[]>;
  dateOffered: () => Promise<DateTimeOutput>;
  dateDecided: () => Promise<DateTimeOutput>;
  jobDecision: () => Promise<JobDecision>;
  updatedAt: () => Promise<DateTimeOutput>;
  applicationStatus: () => Promise<ApplicationStatus>;
}

export interface JobApplicationPreviousValuesSubscription
  extends Promise<AsyncIterator<JobApplicationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  companyName: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  position: () => Promise<AsyncIterator<String>>;
  locationName: () => Promise<AsyncIterator<String>>;
  rating: () => Promise<AsyncIterator<Int>>;
  isRemote: () => Promise<AsyncIterator<Boolean>>;
  jobListingLink: () => Promise<AsyncIterator<String>>;
  jobListingNotes: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  isApplicationActive: () => Promise<AsyncIterator<Boolean>>;
  dateApplied: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateInterviewing: () => Promise<AsyncIterator<DateTimeOutput[]>>;
  dateOffered: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateDecided: () => Promise<AsyncIterator<DateTimeOutput>>;
  jobDecision: () => Promise<AsyncIterator<JobDecision>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  applicationStatus: () => Promise<AsyncIterator<ApplicationStatus>>;
}

export interface JobApplicationContactSubscriptionPayload {
  mutation: MutationType;
  node: JobApplicationContact;
  updatedFields: String[];
  previousValues: JobApplicationContactPreviousValues;
}

export interface JobApplicationContactSubscriptionPayloadPromise
  extends Promise<JobApplicationContactSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobApplicationContactPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobApplicationContactPreviousValuesPromise>() => T;
}

export interface JobApplicationContactSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobApplicationContactSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobApplicationContactSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobApplicationContactPreviousValuesSubscription>() => T;
}

export interface JobApplicationContactPreviousValues {
  id: ID_Output;
  name: String;
  position?: String;
  email?: String;
  phone?: String;
  notes?: String;
  order: Int;
}

export interface JobApplicationContactPreviousValuesPromise
  extends Promise<JobApplicationContactPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  position: () => Promise<String>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  notes: () => Promise<String>;
  order: () => Promise<Int>;
}

export interface JobApplicationContactPreviousValuesSubscription
  extends Promise<AsyncIterator<JobApplicationContactPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  position: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  notes: () => Promise<AsyncIterator<String>>;
  order: () => Promise<AsyncIterator<Int>>;
}

export interface JobApplicationResumeSubscriptionPayload {
  mutation: MutationType;
  node: JobApplicationResume;
  updatedFields: String[];
  previousValues: JobApplicationResumePreviousValues;
}

export interface JobApplicationResumeSubscriptionPayloadPromise
  extends Promise<JobApplicationResumeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JobApplicationResumePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JobApplicationResumePreviousValuesPromise>() => T;
}

export interface JobApplicationResumeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JobApplicationResumeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JobApplicationResumeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JobApplicationResumePreviousValuesSubscription>() => T;
}

export interface JobApplicationResumePreviousValues {
  id: ID_Output;
  selectedVersionId: String;
}

export interface JobApplicationResumePreviousValuesPromise
  extends Promise<JobApplicationResumePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  selectedVersionId: () => Promise<String>;
}

export interface JobApplicationResumePreviousValuesSubscription
  extends Promise<AsyncIterator<JobApplicationResumePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  selectedVersionId: () => Promise<AsyncIterator<String>>;
}

export interface ResumeSubscriptionPayload {
  mutation: MutationType;
  node: Resume;
  updatedFields: String[];
  previousValues: ResumePreviousValues;
}

export interface ResumeSubscriptionPayloadPromise
  extends Promise<ResumeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ResumePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ResumePreviousValuesPromise>() => T;
}

export interface ResumeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ResumeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ResumeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ResumePreviousValuesSubscription>() => T;
}

export interface ResumePreviousValues {
  id: ID_Output;
  name: String;
  updatedAt: DateTimeOutput;
  createdAt: DateTimeOutput;
}

export interface ResumePreviousValuesPromise
  extends Promise<ResumePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ResumePreviousValuesSubscription
  extends Promise<AsyncIterator<ResumePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  resetToken?: String;
  resetTokenExpiry?: Float;
  emailConfirmationToken?: String;
  hasVerifiedEmail?: Boolean;
  hasCompletedOnboarding: Boolean;
  googleId?: String;
  email: String;
  password?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<Float>;
  emailConfirmationToken: () => Promise<String>;
  hasVerifiedEmail: () => Promise<Boolean>;
  hasCompletedOnboarding: () => Promise<Boolean>;
  googleId: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<Float>>;
  emailConfirmationToken: () => Promise<AsyncIterator<String>>;
  hasVerifiedEmail: () => Promise<AsyncIterator<Boolean>>;
  hasCompletedOnboarding: () => Promise<AsyncIterator<Boolean>>;
  googleId: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "JobDecision",
    embedded: false
  },
  {
    name: "ApplicationStatus",
    embedded: false
  },
  {
    name: "BillingFrequency",
    embedded: false
  },
  {
    name: "Card",
    embedded: false
  },
  {
    name: "BillingInfo",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "JobApplicationResume",
    embedded: false
  },
  {
    name: "JobApplication",
    embedded: false
  },
  {
    name: "GoogleMapsLocation",
    embedded: false
  },
  {
    name: "Company",
    embedded: false
  },
  {
    name: "AwsFileData",
    embedded: false
  },
  {
    name: "Resume",
    embedded: false
  },
  {
    name: "CompanyContact",
    embedded: false
  },
  {
    name: "JobApplicationContact",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `${process.env["PRISMA_ENDPOINT"]}`,
  secret: `${process.env["PRISMA_SECRET"]}`
});
export const prisma = new Prisma();
